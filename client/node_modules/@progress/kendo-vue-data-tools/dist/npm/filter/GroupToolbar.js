"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __spreadArrays = undefined && undefined.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GroupToolbarVue2 = exports.GroupToolbar = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';

var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var operators_1 = require("./operators");

var messages_1 = require("../messages");
/**
 * @hidden
 */


var GroupToolbarVue2 = {
  name: 'KendoFilterGroup',
  // @ts-ignore
  emits: {
    change: null,
    remove: null
  },
  props: {
    filter: {
      type: Object,
      required: true
    },
    fields: {
      type: Array,
      required: true
    },
    defaultGroupFilter: {
      type: Object,
      required: true
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  render: function render(createElement) {
    var _this = this;

    var h = gh || createElement;
    var _a = this.$props,
        fields = _a.fields,
        filter = _a.filter;
    var locService = kendo_vue_intl_1.provideLocalizationService(this);
    return h("div", {
      "class": "k-filter-toolbar"
    }, [// @ts-ignore function children   
    h(kendo_vue_buttons_1.Toolbar, {
      keyboardNavigation: false,
      attrs: this.v3 ? undefined : {
        keyboardNavigation: false
      }
    }, this.v3 ? function () {
      return [// @ts-ignore function children 
      h(kendo_vue_buttons_1.ToolbarItem, _this.v3 ? function () {
        return [// @ts-ignore function children 
        h(kendo_vue_buttons_1.ButtonGroup, _this.v3 ? function () {
          return [// @ts-ignore function children 
          h(kendo_vue_buttons_1.Button, {
            togglable: true,
            attrs: _this.v3 ? undefined : {
              togglable: true,
              selected: filter.logic === 'and',
              type: "button"
            },
            onClick: _this.onLogicAnd,
            on: _this.v3 ? undefined : {
              "click": _this.onLogicAnd
            },
            selected: filter.logic === 'and',
            type: "button"
          }, _this.v3 ? function () {
            return [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])];
          } : [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])]), // @ts-ignore function children 
          h(kendo_vue_buttons_1.Button, {
            togglable: true,
            attrs: _this.v3 ? undefined : {
              togglable: true,
              selected: filter.logic === 'or',
              type: "button"
            },
            onClick: _this.onLogicOr,
            on: _this.v3 ? undefined : {
              "click": _this.onLogicOr
            },
            selected: filter.logic === 'or',
            type: "button"
          }, _this.v3 ? function () {
            return [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])];
          } : [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])])];
        } : [h(kendo_vue_buttons_1.Button, {
          togglable: true,
          attrs: _this.v3 ? undefined : {
            togglable: true,
            selected: filter.logic === 'and',
            type: "button"
          },
          onClick: _this.onLogicAnd,
          on: _this.v3 ? undefined : {
            "click": _this.onLogicAnd
          },
          selected: filter.logic === 'and',
          type: "button"
        }, _this.v3 ? function () {
          return [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])];
        } : [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])]), h(kendo_vue_buttons_1.Button, {
          togglable: true,
          attrs: _this.v3 ? undefined : {
            togglable: true,
            selected: filter.logic === 'or',
            type: "button"
          },
          onClick: _this.onLogicOr,
          on: _this.v3 ? undefined : {
            "click": _this.onLogicOr
          },
          selected: filter.logic === 'or',
          type: "button"
        }, _this.v3 ? function () {
          return [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])];
        } : [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])])])];
      } : [h(kendo_vue_buttons_1.ButtonGroup, _this.v3 ? function () {
        return [h(kendo_vue_buttons_1.Button, {
          togglable: true,
          attrs: _this.v3 ? undefined : {
            togglable: true,
            selected: filter.logic === 'and',
            type: "button"
          },
          onClick: _this.onLogicAnd,
          on: _this.v3 ? undefined : {
            "click": _this.onLogicAnd
          },
          selected: filter.logic === 'and',
          type: "button"
        }, _this.v3 ? function () {
          return [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])];
        } : [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])]), h(kendo_vue_buttons_1.Button, {
          togglable: true,
          attrs: _this.v3 ? undefined : {
            togglable: true,
            selected: filter.logic === 'or',
            type: "button"
          },
          onClick: _this.onLogicOr,
          on: _this.v3 ? undefined : {
            "click": _this.onLogicOr
          },
          selected: filter.logic === 'or',
          type: "button"
        }, _this.v3 ? function () {
          return [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])];
        } : [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])])];
      } : [h(kendo_vue_buttons_1.Button, {
        togglable: true,
        attrs: _this.v3 ? undefined : {
          togglable: true,
          selected: filter.logic === 'and',
          type: "button"
        },
        onClick: _this.onLogicAnd,
        on: _this.v3 ? undefined : {
          "click": _this.onLogicAnd
        },
        selected: filter.logic === 'and',
        type: "button"
      }, _this.v3 ? function () {
        return [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])];
      } : [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])]), h(kendo_vue_buttons_1.Button, {
        togglable: true,
        attrs: _this.v3 ? undefined : {
          togglable: true,
          selected: filter.logic === 'or',
          type: "button"
        },
        onClick: _this.onLogicOr,
        on: _this.v3 ? undefined : {
          "click": _this.onLogicOr
        },
        selected: filter.logic === 'or',
        type: "button"
      }, _this.v3 ? function () {
        return [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])];
      } : [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])])])]), // @ts-ignore function children 
      h(kendo_vue_buttons_1.ToolbarItem, _this.v3 ? function () {
        return [// @ts-ignore function children 
        h(kendo_vue_buttons_1.Button, {
          title: locService.toLanguageString(messages_1.filterAddExpression, messages_1.messages[messages_1.filterAddExpression]),
          attrs: _this.v3 ? undefined : {
            title: locService.toLanguageString(messages_1.filterAddExpression, messages_1.messages[messages_1.filterAddExpression]),
            icon: "filter-add-expression",
            type: "button"
          },
          icon: "filter-add-expression",
          type: "button",
          onClick: _this.onAddExpression,
          on: _this.v3 ? undefined : {
            "click": _this.onAddExpression
          }
        })];
      } : [h(kendo_vue_buttons_1.Button, {
        title: locService.toLanguageString(messages_1.filterAddExpression, messages_1.messages[messages_1.filterAddExpression]),
        attrs: _this.v3 ? undefined : {
          title: locService.toLanguageString(messages_1.filterAddExpression, messages_1.messages[messages_1.filterAddExpression]),
          icon: "filter-add-expression",
          type: "button"
        },
        icon: "filter-add-expression",
        type: "button",
        onClick: _this.onAddExpression,
        on: _this.v3 ? undefined : {
          "click": _this.onAddExpression
        }
      })]), // @ts-ignore function children 
      h(kendo_vue_buttons_1.ToolbarItem, _this.v3 ? function () {
        return [// @ts-ignore function children 
        h(kendo_vue_buttons_1.Button, {
          title: locService.toLanguageString(messages_1.filterAddGroup, messages_1.messages[messages_1.filterAddGroup]),
          attrs: _this.v3 ? undefined : {
            title: locService.toLanguageString(messages_1.filterAddGroup, messages_1.messages[messages_1.filterAddGroup]),
            icon: "filter-add-group",
            type: "button"
          },
          icon: "filter-add-group",
          type: "button",
          onClick: _this.onAddGroup,
          on: _this.v3 ? undefined : {
            "click": _this.onAddGroup
          }
        })];
      } : [h(kendo_vue_buttons_1.Button, {
        title: locService.toLanguageString(messages_1.filterAddGroup, messages_1.messages[messages_1.filterAddGroup]),
        attrs: _this.v3 ? undefined : {
          title: locService.toLanguageString(messages_1.filterAddGroup, messages_1.messages[messages_1.filterAddGroup]),
          icon: "filter-add-group",
          type: "button"
        },
        icon: "filter-add-group",
        type: "button",
        onClick: _this.onAddGroup,
        on: _this.v3 ? undefined : {
          "click": _this.onAddGroup
        }
      })]), // @ts-ignore function children 
      h(kendo_vue_buttons_1.ToolbarItem, _this.v3 ? function () {
        return [// @ts-ignore function children 
        h(kendo_vue_buttons_1.Button, {
          title: locService.toLanguageString(messages_1.filterClose, messages_1.messages[messages_1.filterClose]),
          attrs: _this.v3 ? undefined : {
            title: locService.toLanguageString(messages_1.filterClose, messages_1.messages[messages_1.filterClose]),
            icon: "close",
            look: "flat",
            type: "button"
          },
          icon: "close",
          look: "flat",
          type: "button",
          onClick: _this.onGroupRemove,
          on: _this.v3 ? undefined : {
            "click": _this.onGroupRemove
          }
        })];
      } : [h(kendo_vue_buttons_1.Button, {
        title: locService.toLanguageString(messages_1.filterClose, messages_1.messages[messages_1.filterClose]),
        attrs: _this.v3 ? undefined : {
          title: locService.toLanguageString(messages_1.filterClose, messages_1.messages[messages_1.filterClose]),
          icon: "close",
          look: "flat",
          type: "button"
        },
        icon: "close",
        look: "flat",
        type: "button",
        onClick: _this.onGroupRemove,
        on: _this.v3 ? undefined : {
          "click": _this.onGroupRemove
        }
      })])];
    } : [h(kendo_vue_buttons_1.ToolbarItem, _this.v3 ? function () {
      return [h(kendo_vue_buttons_1.ButtonGroup, _this.v3 ? function () {
        return [h(kendo_vue_buttons_1.Button, {
          togglable: true,
          attrs: _this.v3 ? undefined : {
            togglable: true,
            selected: filter.logic === 'and',
            type: "button"
          },
          onClick: _this.onLogicAnd,
          on: _this.v3 ? undefined : {
            "click": _this.onLogicAnd
          },
          selected: filter.logic === 'and',
          type: "button"
        }, _this.v3 ? function () {
          return [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])];
        } : [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])]), h(kendo_vue_buttons_1.Button, {
          togglable: true,
          attrs: _this.v3 ? undefined : {
            togglable: true,
            selected: filter.logic === 'or',
            type: "button"
          },
          onClick: _this.onLogicOr,
          on: _this.v3 ? undefined : {
            "click": _this.onLogicOr
          },
          selected: filter.logic === 'or',
          type: "button"
        }, _this.v3 ? function () {
          return [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])];
        } : [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])])];
      } : [h(kendo_vue_buttons_1.Button, {
        togglable: true,
        attrs: _this.v3 ? undefined : {
          togglable: true,
          selected: filter.logic === 'and',
          type: "button"
        },
        onClick: _this.onLogicAnd,
        on: _this.v3 ? undefined : {
          "click": _this.onLogicAnd
        },
        selected: filter.logic === 'and',
        type: "button"
      }, _this.v3 ? function () {
        return [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])];
      } : [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])]), h(kendo_vue_buttons_1.Button, {
        togglable: true,
        attrs: _this.v3 ? undefined : {
          togglable: true,
          selected: filter.logic === 'or',
          type: "button"
        },
        onClick: _this.onLogicOr,
        on: _this.v3 ? undefined : {
          "click": _this.onLogicOr
        },
        selected: filter.logic === 'or',
        type: "button"
      }, _this.v3 ? function () {
        return [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])];
      } : [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])])])];
    } : [h(kendo_vue_buttons_1.ButtonGroup, _this.v3 ? function () {
      return [h(kendo_vue_buttons_1.Button, {
        togglable: true,
        attrs: _this.v3 ? undefined : {
          togglable: true,
          selected: filter.logic === 'and',
          type: "button"
        },
        onClick: _this.onLogicAnd,
        on: _this.v3 ? undefined : {
          "click": _this.onLogicAnd
        },
        selected: filter.logic === 'and',
        type: "button"
      }, _this.v3 ? function () {
        return [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])];
      } : [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])]), h(kendo_vue_buttons_1.Button, {
        togglable: true,
        attrs: _this.v3 ? undefined : {
          togglable: true,
          selected: filter.logic === 'or',
          type: "button"
        },
        onClick: _this.onLogicOr,
        on: _this.v3 ? undefined : {
          "click": _this.onLogicOr
        },
        selected: filter.logic === 'or',
        type: "button"
      }, _this.v3 ? function () {
        return [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])];
      } : [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])])];
    } : [h(kendo_vue_buttons_1.Button, {
      togglable: true,
      attrs: _this.v3 ? undefined : {
        togglable: true,
        selected: filter.logic === 'and',
        type: "button"
      },
      onClick: _this.onLogicAnd,
      on: _this.v3 ? undefined : {
        "click": _this.onLogicAnd
      },
      selected: filter.logic === 'and',
      type: "button"
    }, _this.v3 ? function () {
      return [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])];
    } : [locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])]), h(kendo_vue_buttons_1.Button, {
      togglable: true,
      attrs: _this.v3 ? undefined : {
        togglable: true,
        selected: filter.logic === 'or',
        type: "button"
      },
      onClick: _this.onLogicOr,
      on: _this.v3 ? undefined : {
        "click": _this.onLogicOr
      },
      selected: filter.logic === 'or',
      type: "button"
    }, _this.v3 ? function () {
      return [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])];
    } : [locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])])])]), h(kendo_vue_buttons_1.ToolbarItem, _this.v3 ? function () {
      return [h(kendo_vue_buttons_1.Button, {
        title: locService.toLanguageString(messages_1.filterAddExpression, messages_1.messages[messages_1.filterAddExpression]),
        attrs: _this.v3 ? undefined : {
          title: locService.toLanguageString(messages_1.filterAddExpression, messages_1.messages[messages_1.filterAddExpression]),
          icon: "filter-add-expression",
          type: "button"
        },
        icon: "filter-add-expression",
        type: "button",
        onClick: _this.onAddExpression,
        on: _this.v3 ? undefined : {
          "click": _this.onAddExpression
        }
      })];
    } : [h(kendo_vue_buttons_1.Button, {
      title: locService.toLanguageString(messages_1.filterAddExpression, messages_1.messages[messages_1.filterAddExpression]),
      attrs: _this.v3 ? undefined : {
        title: locService.toLanguageString(messages_1.filterAddExpression, messages_1.messages[messages_1.filterAddExpression]),
        icon: "filter-add-expression",
        type: "button"
      },
      icon: "filter-add-expression",
      type: "button",
      onClick: _this.onAddExpression,
      on: _this.v3 ? undefined : {
        "click": _this.onAddExpression
      }
    })]), h(kendo_vue_buttons_1.ToolbarItem, _this.v3 ? function () {
      return [h(kendo_vue_buttons_1.Button, {
        title: locService.toLanguageString(messages_1.filterAddGroup, messages_1.messages[messages_1.filterAddGroup]),
        attrs: _this.v3 ? undefined : {
          title: locService.toLanguageString(messages_1.filterAddGroup, messages_1.messages[messages_1.filterAddGroup]),
          icon: "filter-add-group",
          type: "button"
        },
        icon: "filter-add-group",
        type: "button",
        onClick: _this.onAddGroup,
        on: _this.v3 ? undefined : {
          "click": _this.onAddGroup
        }
      })];
    } : [h(kendo_vue_buttons_1.Button, {
      title: locService.toLanguageString(messages_1.filterAddGroup, messages_1.messages[messages_1.filterAddGroup]),
      attrs: _this.v3 ? undefined : {
        title: locService.toLanguageString(messages_1.filterAddGroup, messages_1.messages[messages_1.filterAddGroup]),
        icon: "filter-add-group",
        type: "button"
      },
      icon: "filter-add-group",
      type: "button",
      onClick: _this.onAddGroup,
      on: _this.v3 ? undefined : {
        "click": _this.onAddGroup
      }
    })]), h(kendo_vue_buttons_1.ToolbarItem, _this.v3 ? function () {
      return [h(kendo_vue_buttons_1.Button, {
        title: locService.toLanguageString(messages_1.filterClose, messages_1.messages[messages_1.filterClose]),
        attrs: _this.v3 ? undefined : {
          title: locService.toLanguageString(messages_1.filterClose, messages_1.messages[messages_1.filterClose]),
          icon: "close",
          look: "flat",
          type: "button"
        },
        icon: "close",
        look: "flat",
        type: "button",
        onClick: _this.onGroupRemove,
        on: _this.v3 ? undefined : {
          "click": _this.onGroupRemove
        }
      })];
    } : [h(kendo_vue_buttons_1.Button, {
      title: locService.toLanguageString(messages_1.filterClose, messages_1.messages[messages_1.filterClose]),
      attrs: _this.v3 ? undefined : {
        title: locService.toLanguageString(messages_1.filterClose, messages_1.messages[messages_1.filterClose]),
        icon: "close",
        look: "flat",
        type: "button"
      },
      icon: "close",
      look: "flat",
      type: "button",
      onClick: _this.onGroupRemove,
      on: _this.v3 ? undefined : {
        "click": _this.onGroupRemove
      }
    })])])]);
  },
  methods: {
    onGroupRemove: function onGroupRemove() {
      this.$emit('remove', {
        filter: this.$props.filter
      });
    },
    onAddExpression: function onAddExpression() {
      var prevFilter = this.$props.filter;
      var firstField = this.$props.fields[0];
      var newExpression = {
        field: firstField.name,
        operator: firstField.operators[0].operator
      };
      newExpression.value = operators_1.stringOperator(newExpression.operator) ? '' : null;
      this.$emit('change', {
        nextFilter: __assign(__assign({}, prevFilter), {
          filters: __spreadArrays(prevFilter.filters, [newExpression])
        }),
        prevFilter: prevFilter
      });
    },
    onAddGroup: function onAddGroup() {
      var prevFilter = this.$props.filter;
      this.$emit('change', {
        nextFilter: __assign(__assign({}, prevFilter), {
          filters: __spreadArrays(prevFilter.filters, [__assign({}, this.$props.defaultGroupFilter)])
        }),
        prevFilter: prevFilter
      });
    },
    onLogicAnd: function onLogicAnd() {
      this.changeLogic('and');
    },
    onLogicOr: function onLogicOr() {
      this.changeLogic('or');
    },
    changeLogic: function changeLogic(logic) {
      var prevFilter = this.$props.filter;

      if (prevFilter.logic !== logic) {
        this.$emit('change', {
          nextFilter: __assign(__assign({}, prevFilter), {
            logic: logic
          }),
          prevFilter: prevFilter
        });
      }
    }
  }
};
exports.GroupToolbarVue2 = GroupToolbarVue2;
/**
 * @hidden
 */

var GroupToolbar = GroupToolbarVue2;
exports.GroupToolbar = GroupToolbar;