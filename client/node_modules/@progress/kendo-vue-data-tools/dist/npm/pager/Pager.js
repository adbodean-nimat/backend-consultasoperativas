"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PagerVue2 = exports.Pager = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';
var inject = allVue.inject;

var PagerNumericButtons_1 = require("./PagerNumericButtons");

var PagerInput_1 = require("./PagerInput");

var PagerPageSizes_1 = require("./PagerPageSizes");

var PagerInfo_1 = require("./PagerInfo");

var PagerNavigationButton_1 = require("./PagerNavigationButton");

var messages_1 = require("../messages");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */


var RESPONSIVE_BREAKPOINT_MEDIUM = 600;
/**
 * @hidden
 */

var RESPONSIVE_BREAKPOINT_LARGE = 768;
/**
 * @hidden
 */

var PagerVue2 = {
  name: 'KendoPager',
  props: {
    total: Number,
    skip: Number,
    take: Number,
    pageSize: Number,
    settings: [Object, Boolean],
    buttonCount: {
      type: Number,
      default: 10
    },
    info: {
      type: Boolean,
      default: true
    },
    type: {
      type: String,
      default: 'numeric',
      validator: function validator(value) {
        return ['numeric', 'input'].includes(value);
      }
    },
    pageSizes: {
      type: Array
    },
    previousNext: Boolean,
    messagesMap: Function,
    responsive: {
      type: Boolean,
      default: true
    },
    pagerRender: [String, Function, Object],
    width: [Number, String]
  },
  data: function data() {
    return {
      size: 'normal'
    };
  },
  mounted: function mounted() {
    window.addEventListener('resize', this.onWindowResize);
    this.onWindowResize();
  },
  updated: function updated() {
    this.onWindowResize();
  },
  destroyed: !!isV3 ? undefined : function () {
    window.removeEventListener('resize', this.onWindowResize);
  },
  // @ts-ignore
  unmounted: function unmounted() {
    window.removeEventListener('resize', this.onWindowResize);
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  computed: {
    wrapperClass: {
      get: function get() {
        return {
          'k-pager-wrap k-pager k-widget': true,
          'k-pager-sm': this.size === 'small',
          'k-pager-md': this.size === 'medium'
        };
      }
    },
    totalPages: {
      get: function get() {
        return Math.ceil((this.$props.total || 0) / this.currentTake);
      }
    },
    currentPage: {
      get: function get() {
        return Math.floor((this.$props.skip || 0) / this.currentTake) + 1;
      }
    },
    currentTake: {
      get: function get() {
        return this.$props.take || this.$props.pageSize;
      }
    }
  },
  methods: {
    changePage: function changePage(page, e) {
      if (page > 0 && page <= this.totalPages) {
        this.$emit('pagechange', {
          skip: (page - 1) * this.currentTake,
          take: this.currentTake
        }, e);
      }
    },
    triggerPageChange: function triggerPageChange(e) {
      var pagesizechange = kendo_vue_common_1.hasListener.call(this, 'pagesizechange');

      if (pagesizechange) {
        this.$emit('pagesizechange', e);
      } else {
        this.$emit('pagechange', e);
      }
    },
    onWindowResize: function onWindowResize() {
      var element = this.$el;

      if (!element || !this.$props.responsive || this.$props.settings.responsive === false) {
        return;
      }

      var width = element.offsetWidth;

      if (width < RESPONSIVE_BREAKPOINT_MEDIUM) {
        this.size = 'small';
      } else if (width >= RESPONSIVE_BREAKPOINT_MEDIUM && width < RESPONSIVE_BREAKPOINT_LARGE) {
        this.size = 'medium';
      } else {
        this.size = 'large';
      }
    },
    transformDimesion: function transformDimesion(initialValue) {
      return typeof initialValue === 'string' ? initialValue.endsWith('px') ? initialValue : initialValue + 'px' : initialValue + 'px';
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoIntlService = inject('kendoIntlService', {});
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore 
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
        skip = _a.skip,
        take = _a.take,
        total = _a.total,
        pageSizes = _a.pageSizes,
        buttonCount = _a.buttonCount,
        messagesMap = _a.messagesMap,
        info = _a.info,
        type = _a.type,
        previousNext = _a.previousNext;

    var settings = __assign({
      pageSizes: pageSizes,
      buttonCount: buttonCount,
      info: info,
      previousNext: previousNext,
      type: type,
      skip: skip,
      take: take,
      total: total,
      messagesMap: messagesMap
    }, this.$props.settings);

    var pagerRender = this.$props.pagerRender || this.$props.settings.pagerRender;
    var pagerRenderTemplate = pagerRender ? kendo_vue_common_1.templateRendering.call(this, pagerRender, kendo_vue_common_1.getListeners.call(this)) : null;
    var localizationService = kendo_vue_intl_1.provideLocalizationService(this);
    var firstPageMessage = messagesMap ? messagesMap(messages_1.pagerFirstPage) : {
      messageKey: messages_1.pagerFirstPage,
      defaultMessage: messages_1.messages[messages_1.pagerFirstPage]
    };
    var previousPageMessage = messagesMap ? messagesMap(messages_1.pagerPreviousPage) : {
      messageKey: messages_1.pagerPreviousPage,
      defaultMessage: messages_1.messages[messages_1.pagerPreviousPage]
    };
    var nextPageMessage = messagesMap ? messagesMap(messages_1.pagerNextPage) : {
      messageKey: messages_1.pagerNextPage,
      defaultMessage: messages_1.messages[messages_1.pagerNextPage]
    };
    var lastPageMessage = messagesMap ? messagesMap(messages_1.pagerLastPage) : {
      messageKey: messages_1.pagerLastPage,
      defaultMessage: messages_1.messages[messages_1.pagerLastPage]
    };
    var changer = settings.type === 'numeric' ? // @ts-ignore
    h(PagerNumericButtons_1.PagerNumericButtons, {
      size: this.size,
      attrs: this.v3 ? undefined : {
        size: this.size,
        buttonCount: settings.buttonCount || 0,
        totalPages: this.totalPages,
        currentPage: this.currentPage
      },
      buttonCount: settings.buttonCount || 0,
      totalPages: this.totalPages,
      currentPage: this.currentPage,
      onPagechange: this.changePage,
      on: this.v3 ? undefined : {
        "pagechange": this.changePage
      }
    }) : // @ts-ignore
    h(PagerInput_1.PagerInput, {
      currentPage: this.currentPage,
      attrs: this.v3 ? undefined : {
        currentPage: this.currentPage,
        totalPages: this.totalPages,
        messagesMap: messagesMap
      },
      totalPages: this.totalPages,
      onPagechange: this.changePage,
      on: this.v3 ? undefined : {
        "pagechange": this.changePage
      },
      messagesMap: messagesMap
    });
    var first, prev, next, last;

    if (settings.previousNext) {
      first = // @ts-ignore function children
      h(PagerNavigationButton_1.PagerNavigationButton, {
        "class": 'k-pager-first' + (this.currentPage === 1 ? ' k-state-disabled' : ''),
        page: 1,
        attrs: this.v3 ? undefined : {
          page: 1,
          title: localizationService.toLanguageString(firstPageMessage.messageKey, firstPageMessage.defaultMessage),
          icon: 'k-icon k-i-seek-w'
        },
        title: localizationService.toLanguageString(firstPageMessage.messageKey, firstPageMessage.defaultMessage),
        icon: 'k-icon k-i-seek-w',
        onPagechange: this.changePage,
        on: this.v3 ? undefined : {
          "pagechange": this.changePage
        }
      });
      prev = // @ts-ignore function children
      h(PagerNavigationButton_1.PagerNavigationButton, {
        "class": this.currentPage === 1 ? ' k-state-disabled' : '',
        page: this.currentPage - 1,
        attrs: this.v3 ? undefined : {
          page: this.currentPage - 1,
          title: localizationService.toLanguageString(previousPageMessage.messageKey, previousPageMessage.defaultMessage),
          icon: 'k-icon k-i-arrow-w'
        },
        title: localizationService.toLanguageString(previousPageMessage.messageKey, previousPageMessage.defaultMessage),
        icon: 'k-icon k-i-arrow-w',
        onPagechange: this.changePage,
        on: this.v3 ? undefined : {
          "pagechange": this.changePage
        }
      });
      next = // @ts-ignore function children
      h(PagerNavigationButton_1.PagerNavigationButton, {
        "class": this.currentPage === this.totalPages ? ' k-state-disabled' : '',
        page: this.currentPage + 1,
        attrs: this.v3 ? undefined : {
          page: this.currentPage + 1,
          title: localizationService.toLanguageString(nextPageMessage.messageKey, nextPageMessage.defaultMessage),
          icon: 'k-icon k-i-arrow-e'
        },
        title: localizationService.toLanguageString(nextPageMessage.messageKey, nextPageMessage.defaultMessage),
        icon: 'k-icon k-i-arrow-e',
        onPagechange: this.changePage,
        on: this.v3 ? undefined : {
          "pagechange": this.changePage
        }
      });
      last = // @ts-ignore function children
      h(PagerNavigationButton_1.PagerNavigationButton, {
        "class": 'k-pager-last' + (this.currentPage === this.totalPages ? ' k-state-disabled' : ''),
        page: this.totalPages,
        attrs: this.v3 ? undefined : {
          page: this.totalPages,
          title: localizationService.toLanguageString(lastPageMessage.messageKey, lastPageMessage.defaultMessage),
          icon: 'k-icon k-i-seek-e'
        },
        title: localizationService.toLanguageString(lastPageMessage.messageKey, lastPageMessage.defaultMessage),
        icon: 'k-icon k-i-seek-e',
        onPagechange: this.changePage,
        on: this.v3 ? undefined : {
          "pagechange": this.changePage
        }
      });
    }

    var renderPageSizes = settings.pageSizes && // @ts-ignore function children
    h(PagerPageSizes_1.PagerPageSizes, {
      onPagechange: this.triggerPageChange,
      on: this.v3 ? undefined : {
        "pagechange": this.triggerPageChange
      },
      pageSize: this.currentTake,
      attrs: this.v3 ? undefined : {
        pageSize: this.currentTake,
        pageSizes: settings.pageSizes,
        messagesMap: messagesMap
      },
      pageSizes: settings.pageSizes,
      messagesMap: messagesMap
    });
    var infoElement = !settings.info ? '' : // @ts-ignore function children
    h(PagerInfo_1.PagerInfo, {
      totalPages: this.$props.total,
      attrs: this.v3 ? undefined : {
        totalPages: this.$props.total,
        skip: this.$props.skip,
        currentPage: this.currentTake,
        messagesMap: messagesMap
      },
      skip: this.$props.skip,
      currentPage: this.currentTake,
      messagesMap: messagesMap
    });
    var pagerContent = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: pagerRenderTemplate,
      additionalProps: __assign(__assign({}, this.$props), {
        current: this.currentPage
      }),
      additionalListeners: {
        pagechange: this.triggerPageChange
      }
    });
    var width = this.transformDimesion(this.$props.width);
    return pagerRender ? h("div", {
      "class": this.wrapperClass,
      style: {
        width: width
      },
      role: "navigation",
      attrs: this.v3 ? undefined : {
        role: "navigation"
      }
    }, [pagerContent]) : h("div", {
      "class": this.wrapperClass,
      style: {
        width: width
      },
      role: "navigation",
      attrs: this.v3 ? undefined : {
        role: "navigation"
      }
    }, [first, prev, changer, next, last, renderPageSizes, infoElement]);
  }
};
exports.PagerVue2 = PagerVue2;
/**
 * @hidden
 */

var Pager = PagerVue2;
exports.Pager = Pager;