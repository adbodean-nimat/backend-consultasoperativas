// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';
var inject = allVue.inject;
import { getDefaultSlots, validatePackage } from '@progress/kendo-vue-common';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { labelsOptional, messages } from './messages';
import { packageMetadata } from './package-metadata';
/**
 * @hidden
 */

var FloatingLabelVue2 = {
  name: 'KendoFloatingLabel',
  props: {
    label: String,
    editorId: String,
    editorValue: [String, Boolean, Number],
    editorPlaceholder: String,
    editorValid: {
      type: Boolean,
      default: undefined
    },
    editorDisabled: Boolean,
    id: String,
    optional: Boolean
  },
  data: function data() {
    return {
      focused: false
    };
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
  },
  computed: {
    spanClassNames: function spanClassNames() {
      return {
        'k-floating-label-container': true,
        'k-focus': this.focused,
        'k-empty': !this.$props.editorPlaceholder && !this.$props.editorValue && this.$props.editorValue !== 0,
        'k-text-disabled': this.$props.editorDisabled,
        'k-rtl': this.$props.dir === 'rtl'
      };
    },
    labelClassNames: function labelClassNames() {
      return {
        'k-label': true,
        'k-text-error': this.$props.editorValid === false,
        'k-text-disabled': this.$props.editorDisabled
      };
    }
  },
  methods: {
    handleFocus: function handleFocus() {
      this.focused = true;
    },
    handleBlur: function handleBlur() {
      this.focused = false;
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlots = getDefaultSlots(this);
    var _a = this.$props,
        label = _a.label,
        editorId = _a.editorId,
        id = _a.id,
        optional = _a.optional;
    var ls = provideLocalizationService(this);
    var localizedOptional = optional ? ls.toLanguageString(labelsOptional, messages[labelsOptional]) : '';
    var optionalElement = localizedOptional && h("span", {
      "class": 'k-label-optional'
    }, [localizedOptional]);
    return h("span", {
      "class": this.spanClassNames,
      onFocusin: this.handleFocus,
      on: this.v3 ? undefined : {
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onFocusout: this.handleBlur,
      dir: this.$props.dir,
      attrs: this.v3 ? undefined : {
        dir: this.$props.dir
      }
    }, [defaultSlots, label ? editorId ? h("label", {
      id: id,
      attrs: this.v3 ? undefined : {
        id: id,
        "for": editorId
      },
      "for": editorId,
      "class": this.labelClassNames
    }, [label, optionalElement]) : h("span", {
      id: id,
      attrs: this.v3 ? undefined : {
        id: id
      },
      "class": this.labelClassNames
    }, [label, optionalElement]) : null]);
  }
};
/**
 * @hidden
 */

var FloatingLabel = FloatingLabelVue2;
export { FloatingLabel, FloatingLabelVue2 };