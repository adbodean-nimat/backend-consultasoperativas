"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterRowVue2 = exports.FilterRow = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';
var inject = allVue.inject;

var filterCommon_1 = require("../filterCommon");

var GridFilterCell_1 = require("../cells/GridFilterCell");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var messages_1 = require("../messages");

var kendo_vue_data_tools_1 = require("@progress/kendo-vue-data-tools");
/**
 * @hidden
 */


var FilterRowVue2 = {
  name: 'kendoFilterRow',
  props: {
    grid: Object,
    columns: Array,
    filter: Object,
    filterOperators: Object,
    sort: [Object, Array],
    cellRender: [String, Function, Object],
    isRtl: Boolean
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    headerCellClassName: function headerCellClassName(field, locked) {
      var result = "" + (locked ? 'k-grid-header-sticky' : '');

      if (this.$props.sort && this.$props.sort.filter(function (descriptor) {
        return descriptor.field === field;
      }).length > 0) {
        result += ' k-sorted';
      }

      return result;
    },
    setFilter: function setFilter(value, operator, field, e) {
      var filters = [];

      if (value !== '' && value !== null || operator !== '') {
        filters.push({
          field: field,
          operator: operator,
          value: value
        });
      }

      if (this.$props.filter && this.$props.filter.filters) {
        var oldFilters = this.$props.filter.filters || [];
        oldFilters.forEach(function (filter) {
          var descriptor = filter;

          if (descriptor && descriptor.field !== field) {
            filters.push(descriptor);
          }
        });
      }

      var filtersResult = filters.length > 0 ? {
        logic: 'and',
        filters: filters
      } : null;
      this.$emit('filterchange', filtersResult, e);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var intl = kendo_vue_intl_1.provideLocalizationService(this);
    var oldFilters = this.$props.filter && this.$props.filter.filters || [];

    var activeFilterValueFor = function activeFilterValueFor(field, defaultValue) {
      if (defaultValue === void 0) {
        defaultValue = null;
      }

      var found = oldFilters.filter(function (filter) {
        return filter.field === field;
      })[0];
      return found ? found.value : defaultValue;
    };

    var activeOperatorFor = function activeOperatorFor(field) {
      var found = oldFilters.filter(function (filter) {
        return filter.field === field;
      })[0];
      return found ? found.operator : null;
    };

    var filterCellProps;
    var serviceIndex = 0,
        index = -1;
    var filterCells = this.$props.columns.filter(function (c) {
      return c.children.length === 0;
    }).map(function (column) {
      var _this = this;

      var onChangeFn = function onChangeFn(e) {
        _this.setFilter(e.value, e.operator, column.field, e);
      };

      var filterType = filterCommon_1.getFilterType(column.filter); // @ts-ignore

      var filterRender = h(GridFilterCell_1.GridFilterCell, {
        grid: this.$props.grid,
        attrs: this.v3 ? undefined : {
          grid: this.$props.grid,
          field: column.field,
          title: column.filterTitle,
          value: activeFilterValueFor(column.field, filterType === 'text' ? '' : null),
          operator: activeOperatorFor(column.field),
          operators: filterCommon_1.operatorMap(this.$props.filterOperators[filterType] || [], intl),
          booleanValues: filterCommon_1.operatorMap(filterCommon_1.booleanFilterValues, intl),
          filterType: filterType,
          render: column.filterCell || this.$props.cellRender
        },
        field: column.field,
        title: column.filterTitle,
        value: activeFilterValueFor(column.field, filterType === 'text' ? '' : null),
        operator: activeOperatorFor(column.field),
        operators: filterCommon_1.operatorMap(this.$props.filterOperators[filterType] || [], intl),
        booleanValues: filterCommon_1.operatorMap(filterCommon_1.booleanFilterValues, intl),
        filterType: filterType,
        onChange: onChangeFn,
        on: this.v3 ? undefined : {
          "change": onChangeFn
        },
        render: column.filterCell || this.$props.cellRender
      });
      var key = column.declarationIndex >= 0 ? ++index : --serviceIndex;
      var ariaAttrs = {
        ariaLabel: column.filterable ? intl.toLanguageString(messages_1.filterAriaLabel, messages_1.messages[messages_1.filterAriaLabel]) : undefined,
        ariaColumnIndex: column.ariaColumnIndex
      };
      var style = column.left !== undefined ? !this.$props.isRtl ? {
        left: column.left + 'px',
        right: column.right + 'px'
      } : {
        left: column.right + 'px',
        right: column.left + 'px'
      } : {};
      var filterCell = // @ts-ignore function children
      h(kendo_vue_data_tools_1.HeaderThElement, {
        key: key,
        columnId: kendo_vue_data_tools_1.tableKeyboardNavigationTools.getFilterColumnId(column.id),
        attrs: this.v3 ? undefined : {
          columnId: kendo_vue_data_tools_1.tableKeyboardNavigationTools.getFilterColumnId(column.id),
          navigatable: column.navigatable,
          ariaLabel: ariaAttrs.ariaLabel,
          ariaColumnIndex: ariaAttrs.ariaColumnIndex
        },
        navigatable: column.navigatable,
        style: style,
        "class": this.headerCellClassName(column.field, column.locked) || undefined,
        ariaLabel: ariaAttrs.ariaLabel,
        ariaColumnIndex: ariaAttrs.ariaColumnIndex
      }, this.v3 ? function () {
        return [filterRender];
      } : [filterRender]);
      return column.filterable && filterCell || // @ts-ignore function children
      h(kendo_vue_data_tools_1.HeaderThElement, {
        key: key,
        columnId: kendo_vue_data_tools_1.tableKeyboardNavigationTools.getFilterColumnId(column.id),
        attrs: this.v3 ? undefined : {
          columnId: kendo_vue_data_tools_1.tableKeyboardNavigationTools.getFilterColumnId(column.id),
          navigatable: column.navigatable,
          ariaLabel: ariaAttrs.ariaLabel,
          ariaColumnIndex: ariaAttrs.ariaColumnIndex
        },
        navigatable: column.navigatable,
        style: style,
        "class": this.headerCellClassName(column.field, column.locked) || undefined,
        ariaLabel: ariaAttrs.ariaLabel,
        ariaColumnIndex: ariaAttrs.ariaColumnIndex
      });
    }, this);
    return h("tr", {
      "class": "k-filter-row"
    }, [filterCells]);
  }
};
exports.FilterRowVue2 = FilterRowVue2;
/**
 * @hidden
 */

var FilterRow = FilterRowVue2;
exports.FilterRow = FilterRow;