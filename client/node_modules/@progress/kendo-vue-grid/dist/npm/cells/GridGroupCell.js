"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridGroupCellVue2 = exports.GridGroupCell = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var kendo_vue_data_tools_1 = require("@progress/kendo-vue-data-tools");
/**
 * @hidden
 */


var GridGroupCellVue2 = {
  props: {
    id: String,
    field: String,
    dataItem: Object,
    format: String,
    type: String,
    colSpan: Number,
    className: String,
    columnIndex: Number,
    columnsCount: Number,
    rowType: String,
    level: Number,
    expanded: Boolean,
    editor: String,
    dataIndex: Number,
    isSelected: Boolean,
    ariaColumnIndex: Number,
    render: [String, Function, Object]
  },
  // @ts-ignore
  emits: {
    change: null,
    cellkeydown: null
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    getKeyboardNavigationAttributes: {
      default: kendo_vue_common_1.noop
    }
  },
  methods: {
    triggerKeydown: function triggerKeydown(event, expanded) {
      this.$emit('cellkeydown', {
        event: event,
        dataItem: this.$props.dataItem,
        dataIndex: this.$props.dataIndex,
        field: this.$props.field,
        expanded: this.$props.expanded
      });

      if (event.defaultPrevented) {
        return;
      }

      if (event.keyCode === kendo_vue_common_1.Keys.enter) {
        event.preventDefault();
        this.$emit('change', {
          dataItem: this.$props.dataItem,
          dataIndex: this.$props.dataIndex,
          event: event,
          level: this.$props.level,
          field: undefined,
          value: !expanded
        });
      }
    },
    clickHandler: function clickHandler(e, dataItem, expanded) {
      e.preventDefault();
      this.$emit('change', {
        dataItem: dataItem,
        dataIndex: this.$props.dataIndex,
        event: e,
        level: this.$props.level,
        field: undefined,
        value: !expanded
      });
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;

    var h = gh || createElement;
    var defaultRendering = null;
    var _a = this.$props,
        columnIndex = _a.columnIndex,
        level = _a.level,
        columnsCount = _a.columnsCount,
        rowType = _a.rowType,
        dataItem = _a.dataItem,
        field = _a.field,
        expanded = _a.expanded,
        render = _a.render;
    var navAttrs = this.getKeyboardNavigationAttributes(this.$props.id);

    if (columnIndex === undefined || level === undefined || columnIndex < level || columnsCount === undefined || rowType !== 'groupHeader' || dataItem[field] === undefined) {
      defaultRendering = h("td", {
        key: 'g' + columnIndex,
        "class": "k-group-cell"
      });
    } else if (columnIndex <= level) {
      defaultRendering = h("td", {
        onKeydown: function onKeydown(ev) {
          _this.triggerKeydown(ev, expanded);
        },
        on: this.v3 ? undefined : {
          "keydown": function onKeydown(ev) {
            _this.triggerKeydown(ev, expanded);
          }
        },
        key: 'g-colspan',
        colspan: columnsCount - columnIndex,
        attrs: this.v3 ? undefined : {
          colspan: columnsCount - columnIndex,
          role: 'gridcell',
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[kendo_vue_data_tools_1.KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[kendo_vue_data_tools_1.KEYBOARD_NAV_DATA_ID]
        },
        role: 'gridcell',
        "aria-colindex": this.$props.ariaColumnIndex,
        "aria-selected": this.$props.isSelected,
        "data-grid-col-index": this.$props.columnIndex,
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[kendo_vue_data_tools_1.KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[kendo_vue_data_tools_1.KEYBOARD_NAV_DATA_ID]
      }, [h("p", {
        "class": "k-reset"
      }, [h("a", {
        onClick: function onClick(e) {
          _this.clickHandler(e, dataItem, expanded);
        },
        on: this.v3 ? undefined : {
          "click": function onClick(e) {
            _this.clickHandler(e, dataItem, expanded);
          }
        },
        href: "#",
        attrs: this.v3 ? undefined : {
          href: "#",
          tabindex: -1
        },
        tabindex: -1,
        "class": expanded ? 'k-i-collapse k-icon' : 'k-i-expand k-icon'
      }), dataItem[field].toString()])]);
    }

    return kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: render,
      defaultRendering: defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        keydown: this.triggerKeydown,
        click: this.clickHandler
      }
    });
  }
};
exports.GridGroupCellVue2 = GridGroupCellVue2;
/**
 * @hidden
 */

var GridGroupCell = GridGroupCellVue2;
exports.GridGroupCell = GridGroupCell;