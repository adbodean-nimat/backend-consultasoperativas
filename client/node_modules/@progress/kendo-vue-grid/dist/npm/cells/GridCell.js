"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridCellVue2 = exports.GridCell = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';
var inject = allVue.inject;

var utils_1 = require("./../utils");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var kendo_vue_data_tools_1 = require("@progress/kendo-vue-data-tools");
/**
 * @hidden
 */


var GridCellVue2 = {
  name: 'GridCell',
  // @ts-ignore
  emits: {
    cellclick: null,
    cellkeydown: null
  },
  props: {
    id: String,
    field: String,
    dataItem: Object,
    format: String,
    readFormat: String,
    className: String,
    colSpan: Number,
    columnIndex: Number,
    columnsCount: Number,
    dataIndex: Number,
    rowType: String,
    level: Number,
    expanded: Boolean,
    type: String,
    editor: String,
    isSelected: Boolean,
    ariaColumnIndex: Number,
    render: [String, Function, Object]
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    getKeyboardNavigationAttributes: {
      default: kendo_vue_common_1.noop
    }
  },
  methods: {
    triggerClick: function triggerClick() {
      this.$emit('cellclick', {
        dataItem: this.$props.dataItem,
        field: this.$props.field
      });
    },
    triggerKeydown: function triggerKeydown(e) {
      this.$emit('cellkeydown', {
        event: e,
        dataItem: this.$props.dataItem,
        field: this.$props.field
      });
    },
    triggerEdit: function triggerEdit(dataItem) {
      this.$emit('edit', dataItem);
    },
    triggerAdd: function triggerAdd(dataItem) {
      this.$emit('add', dataItem);
    },
    triggerCancel: function triggerCancel(dataItem) {
      this.$emit('cancel', dataItem);
    },
    triggerSave: function triggerSave(dataItem) {
      this.$emit('save', dataItem);
    },
    triggerRemove: function triggerRemove(dataItem) {
      this.$emit('remove', dataItem);
    }
  },
  created: function created() {
    this._intl = kendo_vue_intl_1.provideIntlService(this);
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoIntlService = inject('kendoIntlService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultRendering = null;
    var navAttrs = this.getKeyboardNavigationAttributes(this.$props.id);

    if (this.$props.rowType === 'groupFooter') {
      defaultRendering = h("td", {
        "class": this.$props.className
      });
    } else if (this.$props.field !== undefined && this.$props.rowType !== 'groupHeader') {
      var data = utils_1.getNestedValue(this.$props.field, this.$props.dataItem);
      var dataAsString = '';

      if (data !== undefined && data !== null) {
        dataAsString = this.$props.format ? this.$props.type ? this._intl.format(this.$props.format, utils_1.parsers[this.$props.type](data, this._intl, this.$props.readFormat)) : this._intl.format(this.$props.format, data) : data.toString();
      }

      defaultRendering = h("td", {
        colspan: this.$props.colSpan,
        attrs: this.v3 ? undefined : {
          colspan: this.$props.colSpan,
          role: 'gridcell',
          "aria-colindex": this.$props.ariaColumnIndex,
          "aria-selected": this.$props.isSelected,
          "data-grid-col-index": this.$props.columnIndex,
          tabindex: navAttrs.tabIndex,
          "data-keyboardnavlevel": navAttrs[kendo_vue_data_tools_1.KEYBOARD_NAV_DATA_LEVEL],
          "data-keyboardnavid": navAttrs[kendo_vue_data_tools_1.KEYBOARD_NAV_DATA_ID]
        },
        "class": this.$props.className,
        onKeydown: this.triggerKeydown,
        on: this.v3 ? undefined : {
          "keydown": this.triggerKeydown,
          "click": this.triggerClick
        },
        onClick: this.triggerClick,
        role: 'gridcell',
        "aria-colindex": this.$props.ariaColumnIndex,
        "aria-selected": this.$props.isSelected,
        "data-grid-col-index": this.$props.columnIndex,
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[kendo_vue_data_tools_1.KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[kendo_vue_data_tools_1.KEYBOARD_NAV_DATA_ID]
      }, [dataAsString]);
    }

    return kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: this.$props.render,
      defaultRendering: defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        click: this.triggerClick,
        keydown: this.triggerKeydown,
        edit: this.triggerEdit,
        add: this.triggerAdd,
        cancel: this.triggerCancel,
        save: this.triggerSave,
        remove: this.triggerRemove
      }
    });
  }
};
exports.GridCellVue2 = GridCellVue2;
/**
 * @hidden
 */

var GridCell = GridCellVue2;
exports.GridCell = GridCell;