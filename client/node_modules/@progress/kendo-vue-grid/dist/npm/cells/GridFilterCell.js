"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridFilterCellVue2 = exports.GridFilterCell = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';
var inject = allVue.inject;

var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");

var messages_1 = require("../messages");

var kendo_vue_dropdowns_1 = require("@progress/kendo-vue-dropdowns");

var kendo_vue_inputs_1 = require("@progress/kendo-vue-inputs");

var kendo_vue_dateinputs_1 = require("@progress/kendo-vue-dateinputs");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var filterCommon_1 = require("../filterCommon");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */


var GridFilterCellVue2 = {
  name: 'KendoGridFilterCell',
  props: {
    id: String,
    grid: Object,
    field: String,
    filterType: String,
    colSpan: Number,
    title: String,
    value: [String, Number, Boolean, Date],
    operator: [String, Function],
    operators: Array,
    booleanValues: Array,
    onChange: Function,
    render: [String, Function, Object]
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  methods: {
    inputChange: function inputChange(value, e) {
      var filter = filterCommon_1.cellInputChange(value, e, this.$props);
      this.triggerChange(filter);
    },
    operatorChange: function operatorChange(operatorValue, e) {
      var filter = filterCommon_1.cellOperatorChange(operatorValue.value.operator, e, this.$props.value);
      this.triggerChange(filter);
    },
    boolDropdownChange: function boolDropdownChange(value, e) {
      var filter = filterCommon_1.cellBoolDropdownChange(value.value.operator, e);
      this.triggerChange(filter);
    },
    clear: function clear(e) {
      e.preventDefault();
      this.triggerChange({
        value: '',
        operator: '',
        event: e
      });
    },
    triggerChange: function triggerChange(filter) {
      filter.field = this.$props.field;
      this.$emit('change', filter);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoIntlService = inject('kendoIntlService', {});
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoIntlService: kendoIntlService,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this = this;

    var h = gh || createElement;
    var localizationService = kendo_vue_intl_1.provideLocalizationService(this);
    var selectedOperator = this.$props.operators.find(function (item) {
      return item.operator === _this.$props.operator;
    }) || null;

    var renderOperatorEditor = function renderOperatorEditor() {
      if (this.$props.filterType === 'boolean') {
        return;
      }

      return (// @ts-ignore
        h(kendo_vue_dropdowns_1.DropDownList, {
          onChange: this.operatorChange,
          on: this.v3 ? undefined : {
            "change": this.operatorChange
          },
          value: selectedOperator,
          attrs: this.v3 ? undefined : {
            value: selectedOperator,
            iconClassName: "k-i-filter k-icon",
            "data-items": this.$props.operators,
            textField: "text",
            title: localizationService.toLanguageString(messages_1.filterChooseOperator, messages_1.messages[messages_1.filterChooseOperator]),
            popupSettings: {
              width: ''
            }
          },
          "class": "k-dropdown-operator",
          iconClassName: "k-i-filter k-icon",
          "data-items": this.$props.operators,
          textField: "text",
          title: localizationService.toLanguageString(messages_1.filterChooseOperator, messages_1.messages[messages_1.filterChooseOperator]),
          popupSettings: {
            width: ''
          }
        })
      );
    };

    var filterComponent = function filterComponent(filterType, value) {
      var _this = this;

      switch (filterType) {
        case 'numeric':
          return (// @ts-ignore
            h(kendo_vue_inputs_1.NumericTextBox, {
              value: value,
              attrs: this.v3 ? undefined : {
                value: value,
                title: this.$props.title
              },
              onChange: function onChange(e) {
                _this.inputChange(e.value, e.event);
              },
              on: this.v3 ? undefined : {
                "change": function onChange(e) {
                  _this.inputChange(e.value, e.event);
                }
              },
              title: this.$props.title
            })
          );

        case 'date':
          return (// @ts-ignore
            h(kendo_vue_dateinputs_1.DatePicker, {
              value: value,
              attrs: this.v3 ? undefined : {
                value: value,
                title: this.$props.title
              },
              onChange: function onChange(e) {
                _this.inputChange(e.value, e);
              },
              on: this.v3 ? undefined : {
                "change": function onChange(e) {
                  _this.inputChange(e.value, e);
                }
              },
              title: this.$props.title
            })
          );

        case 'boolean':
          var booleanValues = this.$props.booleanValues;
          return (// @ts-ignore
            h(kendo_vue_dropdowns_1.DropDownList, {
              onChange: this.boolDropdownChange,
              on: this.v3 ? undefined : {
                "change": this.boolDropdownChange
              },
              value: booleanValues.find(function (item) {
                return item.operator === (value || '');
              }),
              attrs: this.v3 ? undefined : {
                value: booleanValues.find(function (item) {
                  return item.operator === (value || '');
                }),
                "data-items": booleanValues,
                textField: "text",
                title: this.$props.title
              },
              "data-items": booleanValues,
              textField: "text",
              title: this.$props.title
            })
          );

        default:
          return h("span", {
            "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
          }, [h("input", {
            "class": "k-input-inner",
            value: this.v3 ? value || '' : null,
            domProps: this.v3 ? undefined : {
              "value": value || ''
            },
            onInput: function onInput(e) {
              _this.inputChange(e.target.value, e);
            },
            on: this.v3 ? undefined : {
              "input": function onInput(e) {
                _this.inputChange(e.target.value, e);
              }
            },
            title: this.$props.title,
            attrs: this.v3 ? undefined : {
              title: this.$props.title
            }
          })]);
      }
    };

    var defaultRendering = h("div", {
      "class": "k-filtercell"
    }, [h("div", {
      "class": "k-filtercell-wrapper"
    }, [filterComponent.call(this, this.$props.filterType, this.$props.value), renderOperatorEditor.call(this), // @ts-ignore function children 
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        icon: 'filter-clear',
        title: localizationService.toLanguageString(messages_1.filterClearButton, messages_1.messages[messages_1.filterClearButton])
      },
      icon: 'filter-clear',
      "class": {
        /* button is always visible if there is either value or operator */
        'k-disabled': !(!(this.$props.value === null || this.$props.value === '') || this.$props.operator)
      },
      title: localizationService.toLanguageString(messages_1.filterClearButton, messages_1.messages[messages_1.filterClearButton]),
      onClick: this.clear,
      on: this.v3 ? undefined : {
        "click": this.clear
      }
    })])]);
    var gridListeners = this.$props.grid ? kendo_vue_common_1.getListeners.call(this.$props.grid) : null;
    var cellRenderFunction = kendo_vue_common_1.templateRendering.call(this.$props.grid, this.$props.render, gridListeners);
    return kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: cellRenderFunction,
      defaultRendering: defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        change: this.triggerChange
      }
    });
  }
};
exports.GridFilterCellVue2 = GridFilterCellVue2;
/**
 * @hidden
 */

var GridFilterCell = GridFilterCellVue2;
exports.GridFilterCell = GridFilterCell;