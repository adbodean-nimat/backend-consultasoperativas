"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __spreadArrays = undefined && undefined.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridColumnMenuCheckboxFilterVue2 = exports.GridColumnMenuCheckboxFilter = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';
var inject = allVue.inject;

var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");

var GridColumnMenuItem_1 = require("./GridColumnMenuItem");

var GridColumnMenuItemGroup_1 = require("./GridColumnMenuItemGroup");

var GridColumnMenuItemContent_1 = require("./GridColumnMenuItemContent");

var kendo_vue_inputs_1 = require("@progress/kendo-vue-inputs");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var messages_1 = require("../messages");

var kendo_data_query_1 = require("@progress/kendo-data-query");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var utils_1 = require("../utils");
/**
 * @hidden
 */


var isArrayEqual = function isArrayEqual(firstArray, secondArray) {
  if (firstArray.length !== secondArray.length) {
    return false;
  }

  return firstArray.every(function (ex, i) {
    return ex === secondArray[i];
  });
};
/**
 * @hidden
 */


var GridColumnMenuCheckboxFilterVue2 = {
  name: 'KendoGridColumnMenuCheckboxFilter',
  props: {
    column: Object,
    filter: Object,
    filterable: Boolean,
    filterOperators: Object,
    checkAllItem: [String, Object, Function],
    item: [String, Object, Function],
    expanded: {
      type: Boolean,
      default: undefined
    },
    dataItems: Array,
    searchBox: {
      type: Boolean,
      default: true
    },
    uniqueData: {
      type: Boolean,
      default: true
    }
  },
  data: function data() {
    return {
      currentExpanded: false,
      currentValue: '',
      currentData: undefined,
      dataFromProps: undefined,
      currentFilter: undefined
    };
  },
  created: function created() {
    this.compositeFilterIndex = this.getFilterIndex();
    this.currentExpanded = this.$props.expanded;
    this.currentData = this.parseData(this.$props.dataItems, this.$props.uniqueData) || [];
    this.dataFromProps = this.parseData(this.$props.dataItems, false) || [];
    this.currentFilter = this.defaultFilter();
  },
  updated: function updated() {
    var field = this.$props.column.field || '';
    var data = this.$props.dataItems.map(function (item) {
      return utils_1.getNestedValue(field, item);
    });

    if (!isArrayEqual(data, this.dataFromProps)) {
      this.currentData = data;
      this.dataFromProps = data;
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;

    var _this = this;

    var h = gh || createElement;
    var column = this.$props.column;

    if (!column || !column.field) {
      return h("div");
    }

    var localizationService = kendo_vue_intl_1.provideLocalizationService(this);
    var expandState = this.$props.expanded !== undefined ? this.$props.expanded : this.currentExpanded;
    var filterValues = [];

    if (this.currentFilter) {
      var currentFilter = __spreadArrays(this.currentFilter.filters);

      this.compositeFilterIndex = currentFilter.findIndex(function (filter) {
        if (filter.filters && filter.filters.length > 0) {
          return filter.filters[0].field === column.field;
        }

        return false;
      });

      if (this.compositeFilterIndex !== -1 && currentFilter[this.compositeFilterIndex].filters.length > 0) {
        currentFilter[this.compositeFilterIndex].filters.forEach(function (filterItem) {
          if (filterItem.field === _this.$props.column.field) {
            filterValues.push(filterItem.value);
          }
        });
      }
    }

    var searchBox = function searchBox() {
      return this.$props.searchBox && h("span", {
        "class": "k-list-filter"
      }, [h("span", {
        "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
      }, [h("span", {
        "class": "k-input-icon k-icon k-i-search"
      }), h("input", {
        ref: 'searchBox',
        placeholder: localizationService.toLanguageString(messages_1.searchPlaceholder, messages_1.messages[messages_1.searchPlaceholder]),
        attrs: this.v3 ? undefined : {
          placeholder: localizationService.toLanguageString(messages_1.searchPlaceholder, messages_1.messages[messages_1.searchPlaceholder])
        },
        "class": "k-input-inner",
        value: this.v3 ? this.currentValue : null,
        domProps: this.v3 ? undefined : {
          "value": this.currentValue
        },
        onInput: this.handleSearchChange,
        on: this.v3 ? undefined : {
          "input": this.handleSearchChange
        }
      })])]);
    };

    var uniqueFilterValues = filterValues.filter(function (item, index) {
      return filterValues.indexOf(item) === index;
    });
    var itemTemplate = kendo_vue_common_1.templateRendering.call(this, this.$props.item, kendo_vue_common_1.getListeners.call(this));
    var checkAllItemTemplate = kendo_vue_common_1.templateRendering.call(this, this.$props.checkAllItem, kendo_vue_common_1.getListeners.call(this));
    var defaultCheckAllRendering = h("li", {
      "class": "k-item"
    }, [// @ts-ignore  function children
    h(kendo_vue_inputs_1.Checkbox, {
      label: localizationService.toLanguageString(messages_1.filterCheckAll, messages_1.messages[messages_1.filterCheckAll]),
      attrs: this.v3 ? undefined : {
        label: localizationService.toLanguageString(messages_1.filterCheckAll, messages_1.messages[messages_1.filterCheckAll]),
        checked: this.isAllSelected()
      },
      onChange: function onChange(e) {
        return _this.handleCheckBoxChange(e, 'all');
      },
      on: this.v3 ? undefined : {
        "change": function onChange(e) {
          return _this.handleCheckBoxChange(e, 'all');
        }
      },
      checked: this.isAllSelected()
    })]);
    var checkAllItemRender = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: checkAllItemTemplate,
      defaultRendering: defaultCheckAllRendering,
      additionalProps: {
        checked: this.isAllSelected()
      },
      additionalListeners: {
        change: function change(e) {
          return _this.handleCheckBoxChange(e, 'all');
        }
      }
    });
    return (// @ts-ignore  function children
      h(GridColumnMenuItemGroup_1.GridColumnMenuItemGroup, this.v3 ? function () {
        return [// @ts-ignore  function children
        h(GridColumnMenuItem_1.GridColumnMenuItem, {
          title: localizationService.toLanguageString(messages_1.filterTitle, messages_1.messages[messages_1.filterTitle]),
          attrs: _this2.v3 ? undefined : {
            title: localizationService.toLanguageString(messages_1.filterTitle, messages_1.messages[messages_1.filterTitle]),
            iconClass: 'k-i-filter'
          },
          iconClass: 'k-i-filter',
          onClick: _this2.onFilterExpand,
          on: _this2.v3 ? undefined : {
            "click": _this2.onFilterExpand
          }
        }), // @ts-ignore  function children
        h(GridColumnMenuItemContent_1.GridColumnMenuItemContent, {
          show: !!expandState,
          attrs: _this2.v3 ? undefined : {
            show: !!expandState
          }
        }, _this2.v3 ? function () {
          return [h("div", {
            "class": 'kendo-grid-filter-menu-container'
          }, [h("form", {
            "class": 'k-filter-menu k-group k-reset k-state-border-up',
            onSubmit: _this2.submit,
            on: _this2.v3 ? undefined : {
              "submit": _this2.submit,
              "reset": _this2.clear
            },
            onReset: _this2.clear
          }, [h("div", {
            "class": 'k-filter-menu-container'
          }, [searchBox.call(_this2), h("ul", {
            "class": "k-reset k-multicheck-wrap"
          }, [checkAllItemRender, _this2.currentData.map(function (item, index) {
            var _this = this;

            var defaultRendering = h("li", {
              "class": "k-item",
              key: index
            }, [// @ts-ignore  function children
            h(kendo_vue_inputs_1.Checkbox, {
              label: String(item),
              attrs: this.v3 ? undefined : {
                label: String(item),
                checked: uniqueFilterValues.includes(item)
              },
              onChange: function onChange(e) {
                return _this.handleCheckBoxChange(e, item);
              },
              on: this.v3 ? undefined : {
                "change": function onChange(e) {
                  return _this.handleCheckBoxChange(e, item);
                }
              },
              checked: uniqueFilterValues.includes(item)
            })]);
            var itemRender = kendo_vue_common_1.getTemplate.call(this, {
              h: h,
              template: itemTemplate,
              defaultRendering: defaultRendering,
              additionalProps: {
                item: item,
                index: index,
                checked: uniqueFilterValues.includes(item)
              },
              additionalListeners: {
                change: function change(e) {
                  return _this.handleCheckBoxChange(e, item);
                }
              }
            });
            return itemRender;
          }, _this2)]), h("div", {
            "class": 'k-columnmenu-actions'
          }, [// @ts-ignore function children
          h(kendo_vue_buttons_1.Button, {
            type: 'reset',
            attrs: _this2.v3 ? undefined : {
              type: 'reset'
            }
          }, _this2.v3 ? function () {
            return [localizationService.toLanguageString(messages_1.filterClearButton, messages_1.messages[messages_1.filterClearButton])];
          } : [localizationService.toLanguageString(messages_1.filterClearButton, messages_1.messages[messages_1.filterClearButton])]), // @ts-ignore function children
          h(kendo_vue_buttons_1.Button, {
            themeColor: 'primary',
            attrs: _this2.v3 ? undefined : {
              themeColor: 'primary'
            }
          }, _this2.v3 ? function () {
            return [localizationService.toLanguageString(messages_1.filterSubmitButton, messages_1.messages[messages_1.filterSubmitButton])];
          } : [localizationService.toLanguageString(messages_1.filterSubmitButton, messages_1.messages[messages_1.filterSubmitButton])])])])])])];
        } : [h("div", {
          "class": 'kendo-grid-filter-menu-container'
        }, [h("form", {
          "class": 'k-filter-menu k-group k-reset k-state-border-up',
          onSubmit: _this2.submit,
          on: _this2.v3 ? undefined : {
            "submit": _this2.submit,
            "reset": _this2.clear
          },
          onReset: _this2.clear
        }, [h("div", {
          "class": 'k-filter-menu-container'
        }, [searchBox.call(_this2), h("ul", {
          "class": "k-reset k-multicheck-wrap"
        }, [checkAllItemRender, _this2.currentData.map(function (item, index) {
          var _this = this;

          var defaultRendering = h("li", {
            "class": "k-item",
            key: index
          }, [h(kendo_vue_inputs_1.Checkbox, {
            label: String(item),
            attrs: this.v3 ? undefined : {
              label: String(item),
              checked: uniqueFilterValues.includes(item)
            },
            onChange: function onChange(e) {
              return _this.handleCheckBoxChange(e, item);
            },
            on: this.v3 ? undefined : {
              "change": function onChange(e) {
                return _this.handleCheckBoxChange(e, item);
              }
            },
            checked: uniqueFilterValues.includes(item)
          })]);
          var itemRender = kendo_vue_common_1.getTemplate.call(this, {
            h: h,
            template: itemTemplate,
            defaultRendering: defaultRendering,
            additionalProps: {
              item: item,
              index: index,
              checked: uniqueFilterValues.includes(item)
            },
            additionalListeners: {
              change: function change(e) {
                return _this.handleCheckBoxChange(e, item);
              }
            }
          });
          return itemRender;
        }, _this2)]), h("div", {
          "class": 'k-columnmenu-actions'
        }, [h(kendo_vue_buttons_1.Button, {
          type: 'reset',
          attrs: _this2.v3 ? undefined : {
            type: 'reset'
          }
        }, _this2.v3 ? function () {
          return [localizationService.toLanguageString(messages_1.filterClearButton, messages_1.messages[messages_1.filterClearButton])];
        } : [localizationService.toLanguageString(messages_1.filterClearButton, messages_1.messages[messages_1.filterClearButton])]), h(kendo_vue_buttons_1.Button, {
          themeColor: 'primary',
          attrs: _this2.v3 ? undefined : {
            themeColor: 'primary'
          }
        }, _this2.v3 ? function () {
          return [localizationService.toLanguageString(messages_1.filterSubmitButton, messages_1.messages[messages_1.filterSubmitButton])];
        } : [localizationService.toLanguageString(messages_1.filterSubmitButton, messages_1.messages[messages_1.filterSubmitButton])])])])])])])];
      } : [h(GridColumnMenuItem_1.GridColumnMenuItem, {
        title: localizationService.toLanguageString(messages_1.filterTitle, messages_1.messages[messages_1.filterTitle]),
        attrs: _this2.v3 ? undefined : {
          title: localizationService.toLanguageString(messages_1.filterTitle, messages_1.messages[messages_1.filterTitle]),
          iconClass: 'k-i-filter'
        },
        iconClass: 'k-i-filter',
        onClick: _this2.onFilterExpand,
        on: _this2.v3 ? undefined : {
          "click": _this2.onFilterExpand
        }
      }), h(GridColumnMenuItemContent_1.GridColumnMenuItemContent, {
        show: !!expandState,
        attrs: _this2.v3 ? undefined : {
          show: !!expandState
        }
      }, _this2.v3 ? function () {
        return [h("div", {
          "class": 'kendo-grid-filter-menu-container'
        }, [h("form", {
          "class": 'k-filter-menu k-group k-reset k-state-border-up',
          onSubmit: _this2.submit,
          on: _this2.v3 ? undefined : {
            "submit": _this2.submit,
            "reset": _this2.clear
          },
          onReset: _this2.clear
        }, [h("div", {
          "class": 'k-filter-menu-container'
        }, [searchBox.call(_this2), h("ul", {
          "class": "k-reset k-multicheck-wrap"
        }, [checkAllItemRender, _this2.currentData.map(function (item, index) {
          var _this = this;

          var defaultRendering = h("li", {
            "class": "k-item",
            key: index
          }, [h(kendo_vue_inputs_1.Checkbox, {
            label: String(item),
            attrs: this.v3 ? undefined : {
              label: String(item),
              checked: uniqueFilterValues.includes(item)
            },
            onChange: function onChange(e) {
              return _this.handleCheckBoxChange(e, item);
            },
            on: this.v3 ? undefined : {
              "change": function onChange(e) {
                return _this.handleCheckBoxChange(e, item);
              }
            },
            checked: uniqueFilterValues.includes(item)
          })]);
          var itemRender = kendo_vue_common_1.getTemplate.call(this, {
            h: h,
            template: itemTemplate,
            defaultRendering: defaultRendering,
            additionalProps: {
              item: item,
              index: index,
              checked: uniqueFilterValues.includes(item)
            },
            additionalListeners: {
              change: function change(e) {
                return _this.handleCheckBoxChange(e, item);
              }
            }
          });
          return itemRender;
        }, _this2)]), h("div", {
          "class": 'k-columnmenu-actions'
        }, [h(kendo_vue_buttons_1.Button, {
          type: 'reset',
          attrs: _this2.v3 ? undefined : {
            type: 'reset'
          }
        }, _this2.v3 ? function () {
          return [localizationService.toLanguageString(messages_1.filterClearButton, messages_1.messages[messages_1.filterClearButton])];
        } : [localizationService.toLanguageString(messages_1.filterClearButton, messages_1.messages[messages_1.filterClearButton])]), h(kendo_vue_buttons_1.Button, {
          themeColor: 'primary',
          attrs: _this2.v3 ? undefined : {
            themeColor: 'primary'
          }
        }, _this2.v3 ? function () {
          return [localizationService.toLanguageString(messages_1.filterSubmitButton, messages_1.messages[messages_1.filterSubmitButton])];
        } : [localizationService.toLanguageString(messages_1.filterSubmitButton, messages_1.messages[messages_1.filterSubmitButton])])])])])])];
      } : [h("div", {
        "class": 'kendo-grid-filter-menu-container'
      }, [h("form", {
        "class": 'k-filter-menu k-group k-reset k-state-border-up',
        onSubmit: _this2.submit,
        on: _this2.v3 ? undefined : {
          "submit": _this2.submit,
          "reset": _this2.clear
        },
        onReset: _this2.clear
      }, [h("div", {
        "class": 'k-filter-menu-container'
      }, [searchBox.call(_this2), h("ul", {
        "class": "k-reset k-multicheck-wrap"
      }, [checkAllItemRender, _this2.currentData.map(function (item, index) {
        var _this = this;

        var defaultRendering = h("li", {
          "class": "k-item",
          key: index
        }, [h(kendo_vue_inputs_1.Checkbox, {
          label: String(item),
          attrs: this.v3 ? undefined : {
            label: String(item),
            checked: uniqueFilterValues.includes(item)
          },
          onChange: function onChange(e) {
            return _this.handleCheckBoxChange(e, item);
          },
          on: this.v3 ? undefined : {
            "change": function onChange(e) {
              return _this.handleCheckBoxChange(e, item);
            }
          },
          checked: uniqueFilterValues.includes(item)
        })]);
        var itemRender = kendo_vue_common_1.getTemplate.call(this, {
          h: h,
          template: itemTemplate,
          defaultRendering: defaultRendering,
          additionalProps: {
            item: item,
            index: index,
            checked: uniqueFilterValues.includes(item)
          },
          additionalListeners: {
            change: function change(e) {
              return _this.handleCheckBoxChange(e, item);
            }
          }
        });
        return itemRender;
      }, _this2)]), h("div", {
        "class": 'k-columnmenu-actions'
      }, [h(kendo_vue_buttons_1.Button, {
        type: 'reset',
        attrs: _this2.v3 ? undefined : {
          type: 'reset'
        }
      }, _this2.v3 ? function () {
        return [localizationService.toLanguageString(messages_1.filterClearButton, messages_1.messages[messages_1.filterClearButton])];
      } : [localizationService.toLanguageString(messages_1.filterClearButton, messages_1.messages[messages_1.filterClearButton])]), h(kendo_vue_buttons_1.Button, {
        themeColor: 'primary',
        attrs: _this2.v3 ? undefined : {
          themeColor: 'primary'
        }
      }, _this2.v3 ? function () {
        return [localizationService.toLanguageString(messages_1.filterSubmitButton, messages_1.messages[messages_1.filterSubmitButton])];
      } : [localizationService.toLanguageString(messages_1.filterSubmitButton, messages_1.messages[messages_1.filterSubmitButton])])])])])])])])
    );
  },
  methods: {
    defaultFilter: function defaultFilter() {
      if (this.$props.filter) {
        return kendo_vue_common_1.clone(this.$props.filter);
      }

      return {
        filters: [],
        logic: 'and'
      };
    },
    parseData: function parseData(originalData, isUnique) {
      var field = this.$props.column.field || '';
      var data = originalData.map(function (item) {
        return utils_1.getNestedValue(field, item);
      });

      if (isUnique) {
        return data.filter(function (item, index) {
          return data.indexOf(item) === index;
        });
      }

      return data;
    },
    getFilterIndex: function getFilterIndex() {
      var field = this.$props.column.field;
      var currentFilter = this.defaultFilter();
      var compositeFilterIndex = currentFilter.filters.findIndex(function (filter) {
        return filter.filters && filter.filters.length > 0 && filter.filters[0].field === field;
      });
      return compositeFilterIndex;
    },
    onFilterExpand: function onFilterExpand() {
      var isControlled = this.$props.expanded !== undefined;
      var nextValue = !(isControlled ? this.$props.expanded : this.currentExpanded);
      this.$emit('expandchange', nextValue);

      if (!isControlled) {
        this.currentExpanded = nextValue;
      }
    },
    handleSearchChange: function handleSearchChange(e) {
      var filterExpression = {
        logic: 'and',
        filters: [{
          field: this.$props.column.field,
          operator: 'startswith',
          value: e.target.value,
          ignoreCase: true
        }]
      };
      this.currentValue = e.target.value;
      this.currentData = this.parseData(kendo_data_query_1.filterBy(this.$props.dataItems || [], filterExpression), this.$props.uniqueData);
    },
    clear: function clear(e) {
      e.preventDefault();
      var updatedFilter = this.currentFilter || null;

      if (updatedFilter !== null && updatedFilter.filters.length > 0) {
        if (this.compositeFilterIndex >= 0) {
          updatedFilter.filters.splice(this.compositeFilterIndex, 1);
        }

        this.$emit('filterchange', updatedFilter, e);
      } else {
        this.$emit('filterchange', null, e);
      }

      this.$emit('closemenu');
    },
    submit: function submit(e) {
      e.preventDefault();
      var updatedFilter = this.currentFilter || null;
      this.$emit('filterchange', updatedFilter, e);
      this.$emit('closemenu');
    },
    handleCheckBoxChange: function handleCheckBoxChange(e, value) {
      var field = this.$props.column.field || '';

      var newFilter = __assign({}, this.currentFilter);

      var filters = __spreadArrays(this.currentFilter.filters) || [];
      var fieldFilters = [];

      if (this.compositeFilterIndex !== -1 && newFilter.filters[this.compositeFilterIndex].filters && value !== 'all') {
        fieldFilters = newFilter.filters[this.compositeFilterIndex].filters;
      }

      if (e.value && value === 'all') {
        this.currentData.forEach(function (item) {
          fieldFilters.push({
            field: field,
            operator: 'eq',
            value: item
          });
        });
      } else if (e.value) {
        fieldFilters.push({
          field: field,
          operator: 'eq',
          value: value
        });
      } else if (this.currentFilter) {
        var index = fieldFilters.findIndex(function (filter) {
          return filter.value === value;
        });
        fieldFilters.splice(index, 1);
      }

      newFilter.logic = 'and';

      if (this.compositeFilterIndex !== -1) {
        filters[this.compositeFilterIndex] = {
          logic: 'or',
          filters: fieldFilters
        };
      } else {
        filters.push({
          logic: 'or',
          filters: fieldFilters
        });
      }

      if (!e.value && value === 'all' || fieldFilters.length === 0) {
        filters.splice(this.compositeFilterIndex, 1);
      }

      newFilter.filters = filters;
      this.currentFilter = newFilter;
    },
    isAllSelected: function isAllSelected() {
      var _this = this;

      var isAllChecked = false;

      if (this.currentFilter) {
        var filters_1 = __spreadArrays(this.currentFilter.filters);

        if (this.compositeFilterIndex === -1) {
          return false;
        }

        isAllChecked = this.currentData.every(function (item) {
          if (_this.compositeFilterIndex !== -1 && filters_1[_this.compositeFilterIndex].filters) {
            var index = filters_1[_this.compositeFilterIndex].filters.findIndex(function (filter) {
              return filter.value === item;
            });

            return index >= 0;
          }

          return false;
        });
        return isAllChecked;
      }

      return isAllChecked;
    }
  }
};
exports.GridColumnMenuCheckboxFilterVue2 = GridColumnMenuCheckboxFilterVue2;
/**
 * @hidden
 */

var GridColumnMenuCheckboxFilter = GridColumnMenuCheckboxFilterVue2;
exports.GridColumnMenuCheckboxFilter = GridColumnMenuCheckboxFilter;