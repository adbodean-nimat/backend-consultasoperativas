"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridRowVue2 = exports.GridRow = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';

var utils_1 = require("../utils");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */


var GridRowVue2 = {
  props: {
    rowType: String,
    dataItem: Object,
    isAltRow: Boolean,
    isHidden: Boolean,
    onClick: Function,
    selectedField: String,
    rowHeight: Number,
    ariaRowIndex: Number,
    dataIndex: Number,
    render: [String, Function, Object]
  },
  methods: {
    handleClick: function handleClick(e) {
      this.$emit('rowclick', e);
    },
    handleDoubleClick: function handleDoubleClick(e) {
      this.$emit('rowdblclick', e);
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = kendo_vue_common_1.getDefaultSlots(this);
    var className = this.$props.rowType === 'groupFooter' || this.$props.rowType === 'groupHeader' ? this.$props.rowType === 'groupFooter' && 'k-group-footer' || 'k-grouping-row' : (this.$props.isAltRow ? 'k-master-row k-alt' : 'k-master-row') + (this.$props.selectedField !== undefined && utils_1.getNestedValue(this.$props.selectedField, this.$props.dataItem) ? ' k-state-selected' : '');
    var defaultRendering = h("tr", {
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick,
        "dblclick": this.handleDoubleClick
      },
      onDblclick: this.handleDoubleClick,
      "class": className,
      style: {
        height: this.$props.rowHeight ? this.$props.rowHeight + 'px' : '',
        visibility: this.$props.isHidden ? 'hidden' : ''
      },
      role: "row",
      attrs: this.v3 ? undefined : {
        role: "row",
        "aria-rowindex": this.$props.ariaRowIndex,
        "data-grid-row-index": this.$props.rowType === 'data' ? this.$props.dataIndex : undefined
      },
      "aria-rowindex": this.$props.ariaRowIndex,
      "data-grid-row-index": this.$props.rowType === 'data' ? this.$props.dataIndex : undefined
    }, [defaultSlot]);
    return kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: this.$props.render,
      defaultRendering: defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        click: this.handleClick
      },
      defaultSlots: defaultSlot,
      swapDefaultSlots: true
    });
  }
};
exports.GridRowVue2 = GridRowVue2;
/**
 * @hidden
 */

var GridRow = GridRowVue2;
exports.GridRow = GridRow;