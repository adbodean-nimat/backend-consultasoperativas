"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cellOperatorChange = exports.cellBoolDropdownChange = exports.getFilterType = exports.getDefaultOperator = exports.cellInputChange = exports.defaultHideSecondFilter = exports.booleanFilterValues = exports.defaultBooleanOperator = exports.operatorMap = exports.IsUnaryFilter = exports.operators = exports.filterLogicList = void 0;
var messages_1 = require("./messages");
/**
 * @hidden
 */
exports.filterLogicList = [
    { text: 'grid.filterAndLogic', operator: 'and' },
    { text: 'grid.filterOrLogic', operator: 'or' }
];
/**
 * @hidden
 */
exports.operators = {
    'text': [
        { text: 'grid.filterContainsOperator', operator: 'contains' },
        { text: 'grid.filterNotContainsOperator', operator: 'doesnotcontain' },
        { text: 'grid.filterEqOperator', operator: 'eq' },
        { text: 'grid.filterNotEqOperator', operator: 'neq' },
        { text: 'grid.filterStartsWithOperator', operator: 'startswith' },
        { text: 'grid.filterEndsWithOperator', operator: 'endswith' },
        { text: 'grid.filterIsNullOperator', operator: 'isnull' },
        { text: 'grid.filterIsNotNullOperator', operator: 'isnotnull' },
        { text: 'grid.filterIsEmptyOperator', operator: 'isempty' },
        { text: 'grid.filterIsNotEmptyOperator', operator: 'isnotempty' }
    ],
    'numeric': [
        { text: 'grid.filterEqOperator', operator: 'eq' },
        { text: 'grid.filterNotEqOperator', operator: 'neq' },
        { text: 'grid.filterGteOperator', operator: 'gte' },
        { text: 'grid.filterGtOperator', operator: 'gt' },
        { text: 'grid.filterLteOperator', operator: 'lte' },
        { text: 'grid.filterLtOperator', operator: 'lt' },
        { text: 'grid.filterIsNullOperator', operator: 'isnull' },
        { text: 'grid.filterIsNotNullOperator', operator: 'isnotnull' }
    ],
    'date': [
        { text: 'grid.filterEqOperator', operator: 'eq' },
        { text: 'grid.filterNotEqOperator', operator: 'neq' },
        { text: 'grid.filterAfterOrEqualOperator', operator: 'gte' },
        { text: 'grid.filterAfterOperator', operator: 'gt' },
        { text: 'grid.filterBeforeOperator', operator: 'lt' },
        { text: 'grid.filterBeforeOrEqualOperator', operator: 'lte' },
        { text: 'grid.filterIsNullOperator', operator: 'isnull' },
        { text: 'grid.filterIsNotNullOperator', operator: 'isnotnull' }
    ],
    'boolean': [
        { text: 'grid.filterEqOperator', operator: 'eq' }
    ]
};
/**
 * @hidden
 */
exports.IsUnaryFilter = function (operator) {
    return operator === 'isnull' || operator === 'isnotnull' || operator === 'isempty' || operator === 'isnotempty';
};
/**
 * @hidden
 */
exports.operatorMap = function (iterable, service) { return iterable.map(function (operator) { return ({
    text: service.toLanguageString(operator.text, messages_1.messages[operator.text]),
    operator: operator.operator
}); }); };
/**
 * @hidden
 */
exports.defaultBooleanOperator = 'eq';
/**
 * @hidden
 */
exports.booleanFilterValues = [
    { text: 'grid.filterBooleanAll', operator: '' },
    { text: 'grid.filterIsTrue', operator: true },
    { text: 'grid.filterIsFalse', operator: false }
];
/**
 * @hidden
 */
exports.defaultHideSecondFilter = {
    text: false,
    numeric: false,
    date: false,
    boolean: true
};
/**
 * @hidden
 */
exports.cellInputChange = function (value, e, props) {
    var defaultOperator = exports.getDefaultOperator(props.operators);
    var operator = props.operator;
    switch (props.filterType) {
        case 'numeric':
            if (!operator || exports.IsUnaryFilter(operator)) {
                // change the operator to default
                operator = defaultOperator;
            }
            if (value === null && operator === defaultOperator) {
                // clear only the default operator
                operator = '';
            }
            break;
        case 'date':
            if (!operator || exports.IsUnaryFilter(operator)) {
                operator = defaultOperator;
            }
            if (value === null && operator === defaultOperator) {
                operator = '';
            }
            break;
        case 'text':
            if (!operator || exports.IsUnaryFilter(operator)) {
                operator = defaultOperator;
            }
            if (!value && operator === defaultOperator) {
                operator = '';
            }
            break;
        default: return;
    }
    return { value: value, operator: operator, event: e };
};
/**
 * @hidden
 */
exports.getDefaultOperator = function (filterOperators, filterType) {
    if (filterType) {
        return filterOperators[filterType][0].operator;
    }
    else {
        return filterOperators[0].operator;
    }
};
/**
 * @hidden
 */
exports.getFilterType = function (filterType) {
    return filterType || 'text';
};
/**
 * @hidden
 */
exports.cellBoolDropdownChange = function (value, e) {
    return {
        value: value,
        operator: value === '' ? '' : exports.defaultBooleanOperator,
        event: e
    };
};
/**
 * @hidden
 */
exports.cellOperatorChange = function (operator, e, value) {
    if (exports.IsUnaryFilter(operator)) {
        // clear the value to avoid confusion on what is filtered
        value = null;
    }
    return { value: value, operator: operator, event: e };
};
