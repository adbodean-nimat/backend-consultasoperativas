var __spreadArrays = this && this.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};
/**
 * @hidden
 */


export var SELECTION_TYPE;

(function (SELECTION_TYPE) {
  SELECTION_TYPE["single"] = "single";
  SELECTION_TYPE["multiple"] = "multiple";
  SELECTION_TYPE["none"] = "none";
})(SELECTION_TYPE || (SELECTION_TYPE = {}));
/**
 * @hidden
 */


export var SELECTION_ACTION;

(function (SELECTION_ACTION) {
  SELECTION_ACTION["toggle"] = "toggle";
  SELECTION_ACTION["remove"] = "remove";
})(SELECTION_ACTION || (SELECTION_ACTION = {}));
/**
 * @hidden
 */


export var selectionReducer = function selectionReducer(state, action) {
  switch (action.selection) {
    case SELECTION_TYPE.single:
      switch (action.type) {
        case SELECTION_ACTION.toggle:
          {
            if (!Array.isArray(state) || state === null) {
              return action.payload === state ? null : action.payload;
            }

            throw new Error('State cannot be an array in single selection');
          }

        case SELECTION_ACTION.remove:
          {
            return action.payload === state ? null : state;
          }

        default:
          return state;
      }

    case SELECTION_TYPE.multiple:
      switch (action.type) {
        case SELECTION_ACTION.toggle:
          {
            if (Array.isArray(state)) {
              return state.some(function (i) {
                return i === action.payload;
              }) ? state.filter(function (i) {
                return i !== action.payload;
              }) : __spreadArrays(state, [action.payload]);
            }

            if (state === null) {
              return [action.payload];
            }

            throw new Error('State cannot be non-array in multiple selection');
          }

        case SELECTION_ACTION.remove:
          {
            if (Array.isArray(state)) {
              return state.some(function (i) {
                return i === action.payload;
              }) ? state.filter(function (i) {
                return i !== action.payload;
              }) : __spreadArrays(state, [action.payload]);
            }

            return state;
          }

        default:
          return state;
      }

    case SELECTION_TYPE.none:
      return null;

    default:
      return state;
  }
};