// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';
import { classNames, getDefaultSlots, validatePackage, kendoThemeMaps } from '@progress/kendo-vue-common';
import { packageMetadata } from './package-metadata';
import util from './util';
var styles = util.styles;
/**
 * @hidden
 */

var ButtonVue2 = {
  name: 'KendoButton',
  // @ts-ignore
  emits: {
    click: null,
    mousedown: null,
    mouseup: null,
    pointerdown: null,
    pointerup: null,
    focus: null,
    blur: null,
    keypress: null
  },
  props: {
    dir: String,
    selected: {
      type: Boolean,
      default: undefined
    },
    togglable: {
      type: Boolean,
      default: false
    },
    icon: {
      type: String,
      default: function _default() {
        return undefined;
      }
    },
    iconClass: {
      type: String,
      default: function _default() {
        return undefined;
      }
    },
    imageUrl: {
      type: String,
      default: function _default() {
        return undefined;
      }
    },
    imageAlt: String,
    disabled: {
      type: Boolean,
      default: undefined
    },
    size: {
      type: String,
      default: 'medium'
    },
    shape: {
      type: String,
      default: 'rectangle',
      validator: function validator(value) {
        return [null, 'rectangle', 'square'].includes(value);
      }
    },
    rounded: {
      type: String,
      default: 'medium'
    },
    fillMode: {
      type: String,
      default: 'solid'
    },
    // eslint-disable-next-line max-len
    themeColor: {
      type: String,
      default: 'base'
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.currentActive = this.$props.togglable === true && this.$props.selected === true;
    this._activeTemp = undefined;
  },
  data: function data() {
    return {
      currentActive: null
    };
  },
  computed: {
    computedSelected: function computedSelected() {
      return this._activeTemp !== undefined ? this._activeTemp : this.$props.selected !== undefined ? this.$props.selected : this.currentActive;
    },
    buttonClasses: function buttonClasses() {
      var _a;

      var _b = this.$props,
          disabled = _b.disabled,
          icon = _b.icon,
          iconClass = _b.iconClass,
          imageUrl = _b.imageUrl,
          dir = _b.dir,
          size = _b.size,
          shape = _b.shape,
          rounded = _b.rounded,
          fillMode = _b.fillMode,
          themeColor = _b.themeColor;
      var hasIcon = icon !== undefined || iconClass !== undefined || imageUrl !== undefined;
      var defaultSlot = getDefaultSlots(this);
      var hasChildren = defaultSlot;
      return _a = {}, _a[styles.button] = true, _a["k-button-" + (kendoThemeMaps.sizeMap[size] || size)] = size, _a["k-button-" + shape] = shape && shape !== 'rectangle', _a["k-rounded-" + (kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a['k-icon-button'] = !hasChildren && hasIcon, _a['k-disabled'] = disabled, _a['k-selected'] = this.computedSelected, _a['k-rtl'] = dir === 'rtl', _a["k-button-" + fillMode] = fillMode, _a["k-button-" + fillMode + "-" + themeColor] = fillMode && themeColor, _a;
    }
  },
  updated: function updated() {
    if (this.$props.togglable && this.$props.selected !== undefined && this.$props.selected !== this.currentActive) {
      this.currentActive = this.$props.selected;
    }
  },
  methods: {
    focus: function focus(e) {
      this.$el.focus(e);
    },
    toggleIfApplicable: function toggleIfApplicable() {
      if (!this.disabled && this.$props.togglable && this.$props.selected === undefined) {
        var active = !this.currentActive;
        this._activeTemp = active;
        this.currentActive = active;
        this._activeTemp = undefined;
      }
    },
    handleClick: function handleClick(event) {
      this.toggleIfApplicable();

      if (!this.disabled) {
        this.$emit('click', event);
      }
    },
    handleMouseDown: function handleMouseDown(event) {
      if (!this.disabled) {
        this.$emit('mousedown', event);
      }
    },
    handlePointerDown: function handlePointerDown(event) {
      if (!this.disabled) {
        this.$emit('pointerdown', event);
      }
    },
    handleMouseUp: function handleMouseUp(event) {
      if (!this.disabled) {
        this.$emit('mouseup', event);
      }
    },
    handlePointerUp: function handlePointerUp(event) {
      if (!this.disabled) {
        this.$emit('pointerup', event);
      }
    },
    handleFocus: function handleFocus(event) {
      if (!this.disabled) {
        this.$emit('focus', event);
      }
    },
    handleBlur: function handleBlur(event) {
      if (!this.disabled) {
        this.$emit('blur', event);
      }
    },
    handleKeypress: function handleKeypress(event) {
      if (!this.disabled) {
        this.$emit('keypress', event);
      }
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
        togglable = _a.togglable,
        icon = _a.icon,
        iconClass = _a.iconClass,
        imageUrl = _a.imageUrl,
        imageAlt = _a.imageAlt;
    var defaultSlot = getDefaultSlots(this);

    var iconElement = function iconElement() {
      if (imageUrl) {
        return h("img", {
          role: "presentation",
          attrs: this.v3 ? undefined : {
            role: "presentation",
            alt: imageAlt,
            src: imageUrl
          },
          "class": 'k-image',
          alt: imageAlt,
          src: imageUrl
        });
      } else if (icon) {
        var iconClasses = classNames('k-icon', 'k-button-icon', 'k-i-' + icon);
        return h("span", {
          role: "presentation",
          attrs: this.v3 ? undefined : {
            role: "presentation"
          },
          "class": iconClasses
        });
      } else if (iconClass) {
        return h("span", {
          role: "presentation",
          attrs: this.v3 ? undefined : {
            role: "presentation"
          },
          "class": iconClass
        });
      }

      return null;
    };

    return h("button", {
      "class": this.buttonClasses,
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick,
        "mousedown": this.handleMouseDown,
        "mouseup": this.handleMouseUp,
        "pointerdown": this.handlePointerDown,
        "pointerup": this.handlePointerUp,
        "focus": this.handleFocus,
        "blur": this.handleBlur,
        "keypress": this.handleKeypress
      },
      onMousedown: this.handleMouseDown,
      onMouseup: this.handleMouseUp,
      onPointerdown: this.handlePointerDown,
      onPointerup: this.handlePointerUp,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onKeypress: this.handleKeypress // Accessibility properties
      ,
      role: togglable ? 'checkbox' : undefined,
      attrs: this.v3 ? undefined : {
        role: togglable ? 'checkbox' : undefined,
        "aria-disabled": this.$props.disabled || undefined,
        "aria-checked": togglable ? this.currentActive : undefined
      },
      "aria-disabled": this.$props.disabled || undefined,
      "aria-checked": togglable ? this.currentActive : undefined
    }, [iconElement.call(this), defaultSlot]);
  }
};
/**
 * @hidden
 */

var Button = ButtonVue2;
export { Button, ButtonVue2 };