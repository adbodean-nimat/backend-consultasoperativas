import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * @hidden
 */
export interface ToolbarItemState {
}
/**
 * @hidden
 */
export interface ToolbarItemComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface ToolbarItemMethods {
    [key: string]: any;
    element: () => HTMLSpanElement | null;
}
/**
 * @hidden
 */
export interface ToolbarItemData {
}
/**
 * @hidden
 */
export interface ToolbarItemAll extends Vue2type, ToolbarItemMethods, ToolbarItemData, ToolbarItemComputed, ToolbarItemState {
}
/**
 * @hidden
 */
declare let ToolbarItemVue2: ComponentOptions<ToolbarItemAll, DefaultData<ToolbarItemData>, DefaultMethods<ToolbarItemAll>, ToolbarItemComputed, RecordPropsDefinition<{}>>;
/**
 * Represents the [Kendo UI for Vue ToolbarItem component]({% slug overview_toolbar %}).  A container component for the sub-elements of the Toolbar.
 *
 *  ```jsx
 *  <template>
 *    <Toolbar>
 *    <ToolbarItem>
 *      <ButtonGroup>
 *        <Button :icon="'bold'" :title="'Bold'" :togglable="true" />
 *        <Button :icon="'italic'" :title="'Italic'" :togglable="true" />
 *        <Button :icon="'underline'" :title="'Underline'" :togglable="true" />
 *      </ButtonGroup>
 *    </ToolbarItem>
 *    <ToolbarSpacer />
 *    <ToolbarItem>
 *      <SplitButton :text="'Insert'" :items="splitItems"> </SplitButton>
 *    </ToolbarItem>
 *    <ToolbarSeparator />
 *    <ToolbarItem>
 *      <Button :icon="'cut'" :title="'Cut'"> Cut </Button>
 *    </ToolbarItem>
 *  </Toolbar>
 *  </template>
 *  ```
 */
declare const ToolbarItem: DefineComponent<{}, any, ToolbarItemData, ToolbarItemComputed, ToolbarItemMethods, {}, {}, {}, string, {}, {}, {}>;
export { ToolbarItem, ToolbarItemVue2 };
