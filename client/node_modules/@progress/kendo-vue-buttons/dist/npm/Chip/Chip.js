"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChipVue2 = exports.Chip = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';
var ref = allVue.ref; // import { ChipListSelectionContext, ChipListFocusContext, ChipListDataContext } from './ChipList';

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var focus_reducer_1 = require("./focus-reducer");

var data_reducer_1 = require("./data-reducer");

var selection_reducer_1 = require("./selection-reducer");

var package_metadata_1 = require("../package-metadata");
/**
 * @hidden
 */


var ChipVue2 = {
  name: 'KendoVueChip',
  props: {
    id: String,
    text: String,
    value: [String, Object],
    type: String,
    dir: {
      type: String,
      default: function _default() {
        return 'ltr';
      }
    },
    removable: {
      type: Boolean,
      default: false
    },
    removeIcon: {
      type: String,
      default: function _default() {
        return 'k-i-close-circle';
      }
    },
    disabled: {
      type: Boolean,
      default: false
    },
    icon: String,
    selectedIcon: {
      type: String,
      default: function _default() {
        return 'k-i-check';
      }
    },
    look: {
      type: String,
      default: function _default() {
        return 'solid';
      }
    },
    size: {
      type: String,
      default: 'medium'
    },
    rounded: {
      type: String,
      default: 'medium'
    },
    fillMode: {
      type: String,
      default: 'solid',
      validator: function validator(value) {
        return [null, 'flat', 'outline', 'solid'].includes(value);
      }
    },
    // eslint-disable-next-line max-len
    themeColor: {
      type: String,
      default: 'base',
      validator: function validator(value) {
        return [null, 'base', 'error', 'info', 'success', 'warning'].includes(value);
      }
    },
    dataItem: Object,
    selected: Boolean,
    ariaDescribedBy: String
  },
  // @ts-ignore
  emits: {
    'click': null,
    'keydown': null,
    'blur': null,
    'focus': null,
    'remove': null
  },
  inject: {
    kendoSelection: {
      default: {
        value: null
      }
    },
    kendoFocused: {
      default: {
        value: null
      }
    },
    kendoDataItems: {
      default: null
    },
    handleDispatchDataItems: {
      default: kendo_vue_common_1.noop
    },
    handleDispatchSelection: {
      default: kendo_vue_common_1.noop
    },
    handleDispatchFocus: {
      default: kendo_vue_common_1.noop
    }
  },
  created: function created() {
    this.currentDir = undefined;
    kendo_vue_common_1.validatePackage(package_metadata_1.packageMetadata);
  },
  mounted: function mounted() {
    this.chip = kendo_vue_common_1.getRef(this, 'chip');
    this.currentDir = this.$props.dir !== undefined ? this.$props.dir === 'rtl' : this.$el && getComputedStyle(this.$el).direction === 'rtl' || false;
  },
  updated: function updated() {
    if (this.kendoFocused.value === this.$props.value && this.$el) {
      this.$el.focus();
    }
  },
  computed: {
    currentSelected: function currentSelected() {
      var _this = this;

      return this.$props.selected || (Array.isArray(this.kendoSelection.value) ? this.kendoSelection.value.some(function (i) {
        return i === _this.$props.value;
      }) : this.kendoSelection.value === this.$props.value);
    }
  },
  methods: {
    computedFocused: function computedFocused() {
      return this.kendoFocused.value === this.$props.value;
    },
    handleClick: function handleClick(event) {
      if (this.handleDispatchSelection) {
        this.handleDispatchSelection({
          type: selection_reducer_1.SELECTION_ACTION.toggle,
          payload: this.$props.value,
          event: event
        });
      }

      this.$emit('click', {
        target: this.target,
        event: event
      });
    },
    handleRemove: function handleRemove(event) {
      event.stopPropagation();

      if (!this.$props.removable) {
        return;
      }

      if (this.handleDispatchFocus) {
        this.handleDispatchDataItems({
          type: data_reducer_1.DATA_ACTION.remove,
          payload: this.$props.value,
          event: event
        });
        this.handleDispatchFocus({
          type: focus_reducer_1.FOCUS_ACTION.reset,
          payload: this.$props.value,
          event: event
        });
        this.handleDispatchSelection({
          type: selection_reducer_1.SELECTION_ACTION.remove,
          payload: this.$props.value,
          event: event
        });
      }

      this.$emit('remove', {
        target: this.target,
        event: event
      });
    },
    handleKeyDown: function handleKeyDown(event) {
      switch (event.keyCode) {
        case kendo_vue_common_1.Keys.left:
          if (this.handleDispatchFocus) {
            this.handleDispatchFocus({
              type: focus_reducer_1.FOCUS_ACTION.prev,
              payload: this.$props.value,
              event: event
            });
          }

          break;

        case kendo_vue_common_1.Keys.right:
          if (this.handleDispatchFocus) {
            this.handleDispatchFocus({
              type: focus_reducer_1.FOCUS_ACTION.next,
              payload: this.$props.value,
              event: event
            });
          }

          break;

        case kendo_vue_common_1.Keys.enter:
          if (this.handleDispatchFocus) {
            this.handleDispatchSelection({
              type: selection_reducer_1.SELECTION_ACTION.toggle,
              payload: this.$props.value,
              event: event
            });
          }

          break;

        case kendo_vue_common_1.Keys.delete:
          this.handleRemove(event);
          break;

        default:
          break;
      }

      this.$emit('keydown', {
        target: this.target,
        event: event
      });
    },
    handleFocus: function handleFocus(event) {
      if (this.handleDispatchFocus) {
        this.handleDispatchFocus({
          payload: this.$props.value,
          type: focus_reducer_1.FOCUS_ACTION.current,
          event: event
        });
      }

      this.$emit('focus', {
        target: this.target,
        event: event
      });
    },
    handleBlur: function handleBlur(event) {
      this.$emit('blur', {
        target: this.target,
        event: event
      });
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var chipRef = ref(null);
    return {
      v3: v3,
      chipRef: chipRef
    };
  },
  render: function render(createElement) {
    var _a;

    var h = gh || createElement;
    var _b = this.$props,
        size = _b.size,
        rounded = _b.rounded,
        themeColor = _b.themeColor,
        fillMode = _b.fillMode,
        look = _b.look,
        type = _b.type;
    return h("div", {
      role: this.$props.role,
      attrs: this.v3 ? undefined : {
        role: this.$props.role,
        id: this.$props.value,
        dir: this.currentDir,
        tabindex: kendo_vue_common_1.getTabIndex(this.$props.tabIndex, this.$props.disabled, undefined),
        "aria-checked": this.currentSelected,
        "aria-disabled": this.$props.disabled,
        "aria-describedby": this.$props.ariaDescribedBy
      },
      id: this.$props.value,
      ref: kendo_vue_common_1.setRef(this, 'chip'),
      dir: this.currentDir,
      tabindex: kendo_vue_common_1.getTabIndex(this.$props.tabIndex, this.$props.disabled, undefined),
      "class": kendo_vue_common_1.classNames('k-chip', (_a = {
        'k-rtl': this.currentDir === 'rtl',
        'k-disabled': this.$props.disabled,
        'k-selected': this.currentSelected,
        'k-focus': this.computedFocused()
      }, _a["k-chip-" + (kendo_vue_common_1.kendoThemeMaps.sizeMap[size] || size)] = size, _a["k-rounded-" + (kendo_vue_common_1.kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a["k-chip-" + fillMode] = fillMode, _a["k-chip-" + fillMode + "-" + themeColor] = Boolean(fillMode && themeColor), _a['k-chip-success'] = type === 'success', _a['k-chip-warning'] = type === 'warning', _a['k-chip-error'] = type === 'error', _a['k-chip-info'] = type === 'info', _a['k-chip-outline'] = look === 'outline' || look === 'outlined', _a['k-chip-solid'] = look === 'solid' || look === 'filled', _a)),
      "aria-checked": this.currentSelected,
      "aria-disabled": this.$props.disabled,
      "aria-describedby": this.$props.ariaDescribedBy,
      onFocus: this.handleFocus,
      on: this.v3 ? undefined : {
        "focus": this.handleFocus,
        "blur": this.handleBlur,
        "click": this.handleClick,
        "keydown": this.handleKeyDown
      },
      onBlur: this.handleBlur,
      onClick: this.handleClick,
      onKeydown: this.handleKeyDown
    }, [this.currentSelected && this.$props.selectedIcon && h("span", {
      "class": kendo_vue_common_1.classNames('k-chip-icon', 'k-icon', this.$props.selectedIcon)
    }), this.$props.icon && h("span", {
      "class": kendo_vue_common_1.classNames('k-chip-icon', 'k-icon', this.$props.icon)
    }), h("span", {
      "class": 'k-chip-content'
    }, [this.$props.text && h("span", {
      "aria-label": this.$props.text,
      attrs: this.v3 ? undefined : {
        "aria-label": this.$props.text
      },
      "class": 'k-chip-label'
    }, [this.$props.text])]), this.$props.removable && h("span", {
      "class": "k-chip-actions"
    }, [h("span", {
      "class": "k-chip-action k-chip-remove-action"
    }, [h("span", {
      "class": kendo_vue_common_1.classNames('k-chip-icon', 'k-icon', this.$props.removeIcon),
      onClick: this.handleRemove,
      on: this.v3 ? undefined : {
        "click": this.handleRemove
      }
    })])])]);
  }
};
exports.ChipVue2 = ChipVue2;
/**
 * @hidden
 */

var Chip = ChipVue2;
exports.Chip = Chip;