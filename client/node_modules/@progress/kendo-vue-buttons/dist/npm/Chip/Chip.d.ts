import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { ChipRemoveEvent, ChipMouseEvent, ChipFocusEvent, ChipKeyboardEvent } from './../models/index';
/**
 * Represents the properties of [Chip]({% slug api_buttons_chip %}) component.
 */
export interface ChipProps {
    /**
     * Sets the `id` property of the top div element of the Chip.
     */
    id?: string;
    /**
     * Sets the `tabIndex` attribute.
     */
    tabIndex?: number;
    /**
     * Sets the label text of the Chip.
     */
    text?: string;
    /**
     * Sets the `id` value of the Chip.
     */
    value?: any;
    /**
     * Sets the `type` of the Chip element - 'warning', 'error', 'success', 'info', by default - 'none'.
     */
    type?: string;
    /**
     * The Chip direction 'ltr' as default or 'rtl'.
     */
    dir?: string;
    /**
     * Determines if the Chip could be removed.
     */
    removable?: boolean;
    /**
     * Determines if the Chip has custom `removeIcon`.
     */
    removeIcon?: string;
    /**
     * Determines if the Chip is disabled.
     */
    disabled?: boolean;
    /**
     * Determines if the Chip has an `icon`.
     */
    icon?: string;
    /**
     * Determines if the Chip has custom selection `icon`.
     */
    selectedIcon?: string;
    /**
     * Determines if the Chip style is `filled` or `outlined`.
     */
    look?: string;
    /**
     * Configures the `size` of the Chip.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `class`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large' | string;
    /**
     * Configures the `roundness` of the Chip.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `class`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full' | string;
    /**
     * Configures the `fillMode` of the Chip.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `class`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'outline' | 'flat' | string;
    /**
     * Configures the `themeColor` of the Chip.
     *
     * The available options are:
     * - base
     * - info
     * - success
     * - warning
     * - error
     * - null&mdash;Does not set a themeColor `class`.
     *
     * @default `base`
     */
    themeColor?: null | 'base' | 'info' | 'success' | 'warning' | 'error' | string;
    /**
     * Triggered on Chip removing.
     */
    onRemove?: (event: ChipRemoveEvent) => void;
    /**
     * Triggered on onClick event.
     */
    onClick?: (event: ChipMouseEvent) => void;
    /**
     * Triggered on onKeyDown event.
     */
    onKeydown?: (event: ChipKeyboardEvent) => void;
    /**
     * Triggered on onFocus event.
     */
    onFocus?: (event: ChipFocusEvent) => void;
    /**
     * Triggered on onBlur event.
     */
    onBlur?: (event: ChipFocusEvent) => void;
    /**
     * Represents the item data, coming from the `ChipList` component.
     */
    dataItem?: any;
    /**
     * Determines if the Chip is selected.
     */
    selected?: boolean;
    /**
     * Identifies the element(s) which will describe the component, similar to HTML aria-describedby attribute.
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * @hidden
     */
    role?: string;
}
/**
 * Represents the target(element and props) of the ChipRemoveEvent.
 */
export interface ChipHandle {
    /**
     * The current element or `null` if there is no one.
     */
    element: HTMLDivElement | null;
    /**
     * The props values of the Chip.
     */
    props: ChipProps;
}
/**
 * @hidden
 */
export interface ChipMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface ChipState {
    v3: boolean;
    target: any;
    currentRtl: boolean;
}
/**
 * @hidden
 */
export interface ChipData {
}
/**
 * @hidden
 */
export interface ChipComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface ChipAll extends ChipMethods, ChipState, ChipData, ChipComputed, Vue2type {
}
/**
 * @hidden
 */
declare let ChipVue2: ComponentOptions<Vue2type, DefaultData<ChipData>, DefaultMethods<ChipAll>, ChipComputed, RecordPropsDefinition<ChipProps>>;
/**
 * @hidden
 */
declare const Chip: DefineComponent<ChipProps, any, ChipData, ChipComputed, ChipMethods, {}, {}, {}, string, ChipProps, ChipProps, {}>;
export { Chip, ChipVue2 };
