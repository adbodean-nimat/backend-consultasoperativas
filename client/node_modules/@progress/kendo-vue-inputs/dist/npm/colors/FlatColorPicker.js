"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlatColorPickerVue2 = exports.FlatColorPicker = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");

var ColorPalette_1 = require("./ColorPalette");

var ColorGradient_1 = require("./ColorGradient");

var package_metadata_1 = require("../package-metadata");

var messages_1 = require("../messages");
/**
 * @hidden
 */


var FlatColorPickerVue2 = {
  name: 'KendoFlatColorPicker',
  created: function created() {
    kendo_vue_common_1.validatePackage(package_metadata_1.packageMetadata);
  },
  props: {
    value: String,
    tabIndex: Number,
    disabled: Boolean,
    view: {
      type: String,
      validator: function validator(value) {
        return ['ColorGradient', 'ColorPalette'].includes(value);
      }
    },
    header: [String, Object, Function, Boolean],
    showClearButton: {
      type: Boolean,
      default: true
    },
    showPreview: {
      type: Boolean,
      default: true
    },
    showButtons: {
      type: Boolean,
      default: true
    }
  },
  computed: {
    isColorGradient: function isColorGradient() {
      return this.view ? this.view === 'ColorGradient' : this.currentView === 'ColorGradient';
    }
  },
  data: function data() {
    return {
      currentView: 'ColorGradient',
      colorValue: 'rgba(255, 255, 255, 1)',
      prevColor: 'rgba(255, 255, 255, 1)'
    };
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;

    var _this = this;

    var h = gh || createElement;
    return h("div", {
      tabindex: kendo_vue_common_1.getTabIndex(this.$props.tabIndex, this.$props.disabled),
      attrs: this.v3 ? undefined : {
        tabindex: kendo_vue_common_1.getTabIndex(this.$props.tabIndex, this.$props.disabled)
      },
      "class": kendo_vue_common_1.classNames('k-flatcolorpicker k-coloreditor', {
        'k-disabled': this.$props.disabled
      }),
      onBlur: this.handleFlatColorPickerBlur,
      on: this.v3 ? undefined : {
        "blur": this.handleFlatColorPickerBlur
      }
    }, [this.$props.header || h("div", {
      "class": "k-coloreditor-header k-hstack"
    }, [h("div", {
      "class": "k-coloreditor-header-actions k-hstack"
    }, [// @ts-ignore  function children
    h(kendo_vue_buttons_1.ButtonGroup, this.v3 ? function () {
      return [// @ts-ignore  function children
      h(kendo_vue_buttons_1.Button, {
        type: "button",
        attrs: _this2.v3 ? undefined : {
          type: "button",
          togglable: true,
          fillMode: 'flat',
          selected: _this2.isColorGradient
        },
        togglable: true,
        fillMode: 'flat',
        selected: _this2.isColorGradient,
        onClick: function onClick(e) {
          return _this.handleViewChange(e, 'ColorGradient');
        },
        on: _this2.v3 ? undefined : {
          "click": function onClick(e) {
            return _this.handleViewChange(e, 'ColorGradient');
          }
        }
      }, _this2.v3 ? function () {
        return [h("span", {
          "class": "k-icon k-i-color-canvas"
        })];
      } : [h("span", {
        "class": "k-icon k-i-color-canvas"
      })]), // @ts-ignore  function children
      h(kendo_vue_buttons_1.Button, {
        type: "button",
        attrs: _this2.v3 ? undefined : {
          type: "button",
          togglable: true,
          fillMode: 'flat',
          selected: !_this2.isColorGradient
        },
        togglable: true,
        fillMode: 'flat',
        selected: !_this2.isColorGradient,
        onClick: function onClick(e) {
          return _this.handleViewChange(e, 'ColorPalette');
        },
        on: _this2.v3 ? undefined : {
          "click": function onClick(e) {
            return _this.handleViewChange(e, 'ColorPalette');
          }
        }
      }, _this2.v3 ? function () {
        return [h("span", {
          "class": "k-icon k-i-palette"
        })];
      } : [h("span", {
        "class": "k-icon k-i-palette"
      })])];
    } : [h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: _this2.v3 ? undefined : {
        type: "button",
        togglable: true,
        fillMode: 'flat',
        selected: _this2.isColorGradient
      },
      togglable: true,
      fillMode: 'flat',
      selected: _this2.isColorGradient,
      onClick: function onClick(e) {
        return _this.handleViewChange(e, 'ColorGradient');
      },
      on: _this2.v3 ? undefined : {
        "click": function onClick(e) {
          return _this.handleViewChange(e, 'ColorGradient');
        }
      }
    }, _this2.v3 ? function () {
      return [h("span", {
        "class": "k-icon k-i-color-canvas"
      })];
    } : [h("span", {
      "class": "k-icon k-i-color-canvas"
    })]), h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: _this2.v3 ? undefined : {
        type: "button",
        togglable: true,
        fillMode: 'flat',
        selected: !_this2.isColorGradient
      },
      togglable: true,
      fillMode: 'flat',
      selected: !_this2.isColorGradient,
      onClick: function onClick(e) {
        return _this.handleViewChange(e, 'ColorPalette');
      },
      on: _this2.v3 ? undefined : {
        "click": function onClick(e) {
          return _this.handleViewChange(e, 'ColorPalette');
        }
      }
    }, _this2.v3 ? function () {
      return [h("span", {
        "class": "k-icon k-i-palette"
      })];
    } : [h("span", {
      "class": "k-icon k-i-palette"
    })])])]), h("div", {
      "class": "k-spacer"
    }), h("div", {
      "class": "k-coloreditor-header-actions k-hstack"
    }, [this.$props.showClearButton && // @ts-ignore  function children
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        fillMode: 'flat'
      },
      fillMode: 'flat',
      onClick: this.handleResetColor,
      on: this.v3 ? undefined : {
        "click": this.handleResetColor
      }
    }, this.v3 ? function () {
      return [h("span", {
        "class": "k-icon k-i-reset-color"
      })];
    } : [h("span", {
      "class": "k-icon k-i-reset-color"
    })]), this.$props.showPreview && defaultProps.showPreview && h("div", {
      "class": "k-coloreditor-preview k-vstack"
    }, [h("span", {
      "class": "k-coloreditor-preview-color k-color-preview",
      style: {
        background: this.colorValue
      }
    }), h("span", {
      "class": "k-coloreditor-current-color k-color-preview",
      style: {
        background: this.prevColor
      },
      onClick: this.handlePrevColorClick,
      on: this.v3 ? undefined : {
        "click": this.handlePrevColorClick
      }
    })])])]), h("div", {
      "class": "k-coloreditor-views k-vstack"
    }, [this.isColorGradient ? h(ColorGradient_1.ColorGradient, {
      // ref={colorGradientRef} 
      value: this.colorValue,
      attrs: this.v3 ? undefined : {
        value: this.colorValue
      },
      onChange: this.handleColorChange,
      on: this.v3 ? undefined : {
        "change": this.handleColorChange,
        "focus": this.handleFocus
      },
      onFocus: this.handleFocus
    }) : h(ColorPalette_1.ColorPalette, {
      value: this.colorValue,
      attrs: this.v3 ? undefined : {
        value: this.colorValue
      },
      onChange: this.handleColorChange,
      on: this.v3 ? undefined : {
        "change": this.handleColorChange,
        "focus": this.handleFocus
      },
      onFocus: this.handleFocus
    })]), this.$props.showButtons && defaultProps.showButtons && h("div", {
      "class": "k-coloreditor-footer k-actions k-actions-end"
    }, [// @ts-ignore  function children
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button"
      },
      "class": "k-coloreditor-cancel",
      onClick: this.handleCancelBtnClick,
      on: this.v3 ? undefined : {
        "click": this.handleCancelBtnClick
      }
    }, this.v3 ? function () {
      return [messages_1.messages[messages_1.flatColorPickerCancelBtn]];
    } : [messages_1.messages[messages_1.flatColorPickerCancelBtn]]), // @ts-ignore  function children
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button"
      },
      "class": "k-coloreditor-apply k-primary",
      onClick: this.handleApplyBtnClick,
      on: this.v3 ? undefined : {
        "click": this.handleApplyBtnClick
      }
    }, this.v3 ? function () {
      return [messages_1.messages[messages_1.flatColorPickerApplyBtn]];
    } : [messages_1.messages[messages_1.flatColorPickerApplyBtn]])])]);
  },
  methods: {
    focus: function focus() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    handleViewChange: function handleViewChange(event, viewType) {
      this.currentView = viewType;
      this.$emit('viewchange', {
        event: event,
        viewType: viewType
      });
    },
    handleResetColor: function handleResetColor() {
      this.colorValue = 'rgba(255, 255, 255, 1)';
    },
    handleColorChange: function handleColorChange(event) {
      this.colorValue = event.value;
    },
    handleApplyBtnClick: function handleApplyBtnClick() {
      this.prevColor = this.colorValue;
    },
    handleCancelBtnClick: function handleCancelBtnClick() {
      this.prevColor = 'rgba(255, 255, 255, 1)';
    },
    handlePrevColorClick: function handlePrevColorClick() {
      this.colorValue = this.prevColor;
    },
    handleFocus: function handleFocus() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    handleFlatColorPickerBlur: function handleFlatColorPickerBlur() {
      this.prevColor = this.colorValue;
    }
  }
};
exports.FlatColorPickerVue2 = FlatColorPickerVue2;
var defaultProps = {
  showClearButton: true,
  showPreview: true,
  showButtons: true
};
/**
 * @hidden
 */

var FlatColorPicker = FlatColorPickerVue2;
exports.FlatColorPicker = FlatColorPicker;