var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
}; // @ts-ignore


import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version[0] === '3';
import { NumericTextBox } from '../main';
import { HexInput } from './HexInput';
import { Button } from '@progress/kendo-vue-buttons';
import { Label } from '@progress/kendo-vue-labels';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages, colorGradientR, colorGradientHex, colorGradientA, colorGradientB, colorGradientG } from '../messages';
/**
 * @hidden
 */

var modes = ['rgba', 'rgb', 'hex'];
/**
 * @hidden
 */

var ColorInputVue2 = {
  name: 'KendoColorInput',
  // @ts-ignore
  emits: {
    'focus': null,
    'blur': null,
    'hexchange': null,
    'rgbachange': null
  },
  props: {
    rgba: Object,
    hex: String,
    opacity: Boolean,
    disabled: Boolean
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data() {
    return {
      inputMode: modes[1]
    };
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var localizationService = provideLocalizationService(this);
    var hexMessage = localizationService.toLanguageString(colorGradientR, messages[colorGradientHex]);
    var rMessage = localizationService.toLanguageString(colorGradientR, messages[colorGradientR]);
    var gMessage = localizationService.toLanguageString(colorGradientR, messages[colorGradientG]);
    var bMessage = localizationService.toLanguageString(colorGradientR, messages[colorGradientB]);
    var aMessage = localizationService.toLanguageString(colorGradientR, messages[colorGradientA]);
    return h("div", {
      "class": "k-colorgradient-inputs k-hstack"
    }, [h("div", {
      "class": "k-vstack"
    }, [h(Button, {
      fillMode: 'flat',
      attrs: this.v3 ? undefined : {
        fillMode: 'flat',
        icon: 'arrows-kpi'
      },
      icon: 'arrows-kpi',
      onFocus: this.onFocus,
      on: this.v3 ? undefined : {
        "focus": this.onFocus,
        "blur": this.onBlur,
        "click": this.onToggleModeChange
      },
      onBlur: this.onBlur,
      "class": "k-colorgradient-toggle-mode k-icon-button",
      onClick: this.onToggleModeChange
    })]), this.inputMode === 'hex' && h("div", {
      "class": "k-vstack k-flex-1"
    }, [h("span", {
      "class": "k-hex-value k-textbox k-input"
    }, [h(HexInput, {
      hex: this.$props.hex,
      attrs: this.v3 ? undefined : {
        hex: this.$props.hex,
        disabled: this.$props.disabled
      },
      onFocus: this.onFocus,
      on: this.v3 ? undefined : {
        "focus": this.onFocus,
        "blur": this.onBlur,
        "hexchange": this.onHexChange
      },
      onBlur: this.onBlur,
      onHexchange: this.onHexChange,
      disabled: this.$props.disabled
    })]), // @ts-ignore  function children
    h(Label, {
      "class": "k-colorgradient-input-label"
    }, this.v3 ? function () {
      return [hexMessage];
    } : [hexMessage])]), (this.inputMode === 'rgb' || this.inputMode === 'rgba') && [h("div", {
      "class": "k-vstack"
    }, [h(NumericTextBox, {
      value: this.$props.rgba.r,
      attrs: this.v3 ? undefined : {
        value: this.$props.rgba.r,
        min: 0,
        max: 255,
        spinners: false,
        format: "n",
        disabled: this.$props.disabled
      },
      min: 0,
      max: 255,
      spinners: false,
      format: "n",
      onFocus: this.onFocus,
      on: this.v3 ? undefined : {
        "focus": this.onFocus,
        "blur": this.onBlur,
        "change": this.onRgbaRChange
      },
      onBlur: this.onBlur,
      onChange: this.onRgbaRChange,
      disabled: this.$props.disabled
    }), // @ts-ignore  function children
    h(Label, {
      "class": "k-colorgradient-input-label"
    }, this.v3 ? function () {
      return [rMessage];
    } : [rMessage])]), h("div", {
      "class": "k-vstack"
    }, [h(NumericTextBox, {
      value: this.$props.rgba.g,
      attrs: this.v3 ? undefined : {
        value: this.$props.rgba.g,
        min: 0,
        max: 255,
        spinners: false,
        format: "n",
        disabled: this.$props.disabled
      },
      min: 0,
      max: 255,
      spinners: false,
      format: "n",
      onFocus: this.onFocus,
      on: this.v3 ? undefined : {
        "focus": this.onFocus,
        "blur": this.onBlur,
        "change": this.onRgbaGChange
      },
      onBlur: this.onBlur,
      onChange: this.onRgbaGChange,
      disabled: this.$props.disabled
    }), // @ts-ignore  function children
    h(Label, {
      "class": "k-colorgradient-input-label"
    }, this.v3 ? function () {
      return [gMessage];
    } : [gMessage])]), h("div", {
      "class": "k-vstack"
    }, [h(NumericTextBox, {
      value: this.$props.rgba.b,
      attrs: this.v3 ? undefined : {
        value: this.$props.rgba.b,
        min: 0,
        max: 255,
        spinners: false,
        format: "n",
        disabled: this.$props.disabled
      },
      min: 0,
      max: 255,
      spinners: false,
      format: "n",
      onFocus: this.onFocus,
      on: this.v3 ? undefined : {
        "focus": this.onFocus,
        "blur": this.onBlur,
        "change": this.onRgbaBChange
      },
      onBlur: this.onBlur,
      onChange: this.onRgbaBChange,
      disabled: this.$props.disabled
    }), // @ts-ignore  function children
    h(Label, {
      "class": "k-colorgradient-input-label"
    }, this.v3 ? function () {
      return [bMessage];
    } : [bMessage])])], this.inputMode === 'rgba' && h("div", {
      "class": "k-vstack"
    }, [this.$props.opacity && h(NumericTextBox, {
      value: this.$props.rgba.a,
      attrs: this.v3 ? undefined : {
        value: this.$props.rgba.a,
        min: 0,
        max: 1,
        step: 0.01,
        spinners: false,
        format: "n2",
        disabled: this.$props.disabled
      },
      min: 0,
      max: 1,
      step: 0.01,
      spinners: false,
      format: "n2",
      onFocus: this.onFocus,
      on: this.v3 ? undefined : {
        "focus": this.onFocus,
        "blur": this.onBlur,
        "change": this.onRgbaAChange
      },
      onBlur: this.onBlur,
      onChange: this.onRgbaAChange,
      disabled: this.$props.disabled
    }), this.$props.opacity && // @ts-ignore  function children
    h(Label, {
      "class": "k-colorgradient-input-label"
    }, this.v3 ? function () {
      return [aMessage];
    } : [aMessage])])]);
  },
  methods: {
    onFocus: function onFocus(event) {
      this.$emit('focus', event);
    },
    onBlur: function onBlur(event) {
      this.$emit('blur', event);
    },
    onHexChange: function onHexChange(event) {
      this.$emit('hexchange', event);
    },
    onRgbaRChange: function onRgbaRChange(event) {
      this.dispatchRgbaChange({
        r: event.value
      }, event);
    },
    onRgbaGChange: function onRgbaGChange(event) {
      this.dispatchRgbaChange({
        g: event.value
      }, event);
    },
    onRgbaBChange: function onRgbaBChange(event) {
      this.dispatchRgbaChange({
        b: event.value
      }, event);
    },
    onRgbaAChange: function onRgbaAChange(event) {
      this.dispatchRgbaChange({
        a: event.value
      }, event);
    },
    dispatchRgbaChange: function dispatchRgbaChange(newValue, event) {
      var rgba = __assign({}, this.$props.rgba);

      if (newValue.r !== undefined) {
        rgba.r = newValue.r;
      }

      if (newValue.g !== undefined) {
        rgba.g = newValue.g;
      }

      if (newValue.b !== undefined) {
        rgba.b = newValue.b;
      }

      if (newValue.a !== undefined) {
        rgba.a = newValue.a;
      }

      this.$emit('rgbachange', rgba, event);
    },
    onToggleModeChange: function onToggleModeChange() {
      var index = modes.length - 1 === modes.indexOf(this.inputMode) ? 0 : modes.indexOf(this.inputMode) + 1;

      if (!this.$props.opacity) {
        var nextIndex = modes[index] === 'rgba' ? index + 1 : index;
        this.inputMode = modes[nextIndex];
      } else {
        this.inputMode = modes[index];
      }
    }
  }
};
/**
 * @hidden
 */

var ColorInput = ColorInputVue2;
export { ColorInput, ColorInputVue2 };